
trabalho_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e74  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005000  08005000  00015000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f0  080051f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f8  080051f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000cc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a4b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e6  00000000  00000000  00029a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000938  00000000  00000000  0002bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206fa  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad92  00000000  00000000  0004cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8558  00000000  00000000  00057a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ff84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d54  00000000  00000000  0011ffd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fe4 	.word	0x08004fe4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004fe4 	.word	0x08004fe4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <HAL_TIM_PWM_PulseFinishedCallback>:
static const uint16_t TIM_PWM_PERIOD = 1000;
static uint32_t pwmVal = 50;
static uint32_t sinPwmVal = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	int bp = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
	(void)bp;

	pwmVal += 1;
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a39      	ldr	r2, [pc, #228]	; (8000f00 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000e1c:	6013      	str	r3, [r2, #0]

	double angPU = (double)pwmVal/TIM_PWM_PERIOD;
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb12 	bl	800044c <__aeabi_ui2d>
 8000e28:	4604      	mov	r4, r0
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb1b 	bl	800046c <__aeabi_i2d>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff fca9 	bl	8000794 <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angRad = angPU * 2 * M_PI;
 8000e4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	f7ff f9bf 	bl	80001d4 <__adddf3>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	a326      	add	r3, pc, #152	; (adr r3, 8000ef8 <HAL_TIM_PWM_PulseFinishedCallback+0xf0>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fb6c 	bl	8000540 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double sinVal = sin(angRad);
 8000e70:	ed97 0b04 	vldr	d0, [r7, #16]
 8000e74:	f003 f840 	bl	8003ef8 <sin>
 8000e78:	ed87 0b02 	vstr	d0, [r7, #8]

	sinPwmVal = (sinVal + 1.0)/2.0 * TIM_PWM_PERIOD;
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8000e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e86:	f7ff f9a5 	bl	80001d4 <__adddf3>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9a:	f7ff fc7b 	bl	8000794 <__aeabi_ddiv>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4614      	mov	r4, r2
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fade 	bl	800046c <__aeabi_i2d>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	f7ff fb42 	bl	8000540 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdfe 	bl	8000ac4 <__aeabi_d2uiz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000ecc:	6013      	str	r3, [r2, #0]

	TIM4->CCR4 = (uint16_t)sinPwmVal;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40

	if (pwmVal >= TIM_PWM_PERIOD)
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d802      	bhi.n	8000eec <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
		pwmVal = 0;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_TIM_PWM_PulseFinishedCallback+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	54442d18 	.word	0x54442d18
 8000efc:	400921fb 	.word	0x400921fb
 8000f00:	20000000 	.word	0x20000000
 8000f04:	3ff00000 	.word	0x3ff00000
 8000f08:	200000d4 	.word	0x200000d4
 8000f0c:	40000800 	.word	0x40000800

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f000 fbb0 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f816 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 f922 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f20:	f000 f900 	bl	8001124 <MX_DMA_Init>
  MX_TIM4_Init();
 8000f24:	f000 f87a 	bl	800101c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f28:	210c      	movs	r1, #12
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <main+0x30>)
 8000f2c:	f001 ff5a 	bl	8002de4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)&sinPwmVal, 1);
 8000f30:	2301      	movs	r3, #1
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <main+0x34>)
 8000f34:	2108      	movs	r1, #8
 8000f36:	4802      	ldr	r0, [pc, #8]	; (8000f40 <main+0x30>)
 8000f38:	f002 f81c 	bl	8002f74 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <main+0x2c>
 8000f3e:	bf00      	nop
 8000f40:	2000002c 	.word	0x2000002c
 8000f44:	200000d4 	.word	0x200000d4

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 f83c 	bl	8004fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <SystemClock_Config+0xd0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f9fc 	bl	80023cc <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fda:	f000 fa21 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fc5d 	bl	80028bc <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001008:	f000 fa0a 	bl	8001420 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <MX_TIM4_Init+0x100>)
 800104e:	4a34      	ldr	r2, [pc, #208]	; (8001120 <MX_TIM4_Init+0x104>)
 8001050:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <MX_TIM4_Init+0x100>)
 8001054:	2254      	movs	r2, #84	; 0x54
 8001056:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <MX_TIM4_Init+0x100>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <MX_TIM4_Init+0x100>)
 8001060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001064:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <MX_TIM4_Init+0x100>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <MX_TIM4_Init+0x100>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001072:	482a      	ldr	r0, [pc, #168]	; (800111c <MX_TIM4_Init+0x100>)
 8001074:	f001 fe0e 	bl	8002c94 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800107e:	f000 f9cf 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108c:	4619      	mov	r1, r3
 800108e:	4823      	ldr	r0, [pc, #140]	; (800111c <MX_TIM4_Init+0x100>)
 8001090:	f002 f9fa 	bl	8003488 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800109a:	f000 f9c1 	bl	8001420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800109e:	481f      	ldr	r0, [pc, #124]	; (800111c <MX_TIM4_Init+0x100>)
 80010a0:	f001 fe47 	bl	8002d32 <HAL_TIM_PWM_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010aa:	f000 f9b9 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	4619      	mov	r1, r3
 80010bc:	4817      	ldr	r0, [pc, #92]	; (800111c <MX_TIM4_Init+0x100>)
 80010be:	f002 fe9f 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80010c8:	f000 f9aa 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010cc:	2360      	movs	r3, #96	; 0x60
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2208      	movs	r2, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <MX_TIM4_Init+0x100>)
 80010e4:	f002 f90e 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80010ee:	f000 f997 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	220c      	movs	r2, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM4_Init+0x100>)
 80010fe:	f002 f901 	bl	8003304 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001108:	f000 f98a 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM4_Init+0x100>)
 800110e:	f000 fa09 	bl	8001524 <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	; 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000002c 	.word	0x2000002c
 8001120:	40000800 	.word	0x40000800

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_DMA_Init+0x3c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <MX_DMA_Init+0x3c>)
 8001134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_DMA_Init+0x3c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	202f      	movs	r0, #47	; 0x2f
 800114c:	f000 fbe1 	bl	8001912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001150:	202f      	movs	r0, #47	; 0x2f
 8001152:	f000 fbfa 	bl	800194a <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	4ba2      	ldr	r3, [pc, #648]	; (8001408 <MX_GPIO_Init+0x2a4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4aa1      	ldr	r2, [pc, #644]	; (8001408 <MX_GPIO_Init+0x2a4>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b9f      	ldr	r3, [pc, #636]	; (8001408 <MX_GPIO_Init+0x2a4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b9b      	ldr	r3, [pc, #620]	; (8001408 <MX_GPIO_Init+0x2a4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a9a      	ldr	r2, [pc, #616]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b98      	ldr	r3, [pc, #608]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a93      	ldr	r2, [pc, #588]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b91      	ldr	r3, [pc, #580]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b8d      	ldr	r3, [pc, #564]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a8c      	ldr	r2, [pc, #560]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b8a      	ldr	r3, [pc, #552]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b86      	ldr	r3, [pc, #536]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a85      	ldr	r2, [pc, #532]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <MX_GPIO_Init+0x2a4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b7f      	ldr	r3, [pc, #508]	; (8001408 <MX_GPIO_Init+0x2a4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a7e      	ldr	r2, [pc, #504]	; (8001408 <MX_GPIO_Init+0x2a4>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b7c      	ldr	r3, [pc, #496]	; (8001408 <MX_GPIO_Init+0x2a4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2108      	movs	r1, #8
 8001226:	4879      	ldr	r0, [pc, #484]	; (800140c <MX_GPIO_Init+0x2a8>)
 8001228:	f001 f8b6 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2101      	movs	r1, #1
 8001230:	4877      	ldr	r0, [pc, #476]	; (8001410 <MX_GPIO_Init+0x2ac>)
 8001232:	f001 f8b1 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f243 0110 	movw	r1, #12304	; 0x3010
 800123c:	4875      	ldr	r0, [pc, #468]	; (8001414 <MX_GPIO_Init+0x2b0>)
 800123e:	f001 f8ab 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001242:	2308      	movs	r3, #8
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	486c      	ldr	r0, [pc, #432]	; (800140c <MX_GPIO_Init+0x2a8>)
 800125a:	f000 ff01 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800125e:	2301      	movs	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	4866      	ldr	r0, [pc, #408]	; (8001410 <MX_GPIO_Init+0x2ac>)
 8001276:	f000 fef3 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800127a:	2308      	movs	r3, #8
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128a:	2305      	movs	r3, #5
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	485e      	ldr	r0, [pc, #376]	; (8001410 <MX_GPIO_Init+0x2ac>)
 8001296:	f000 fee3 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800129e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	485a      	ldr	r0, [pc, #360]	; (8001418 <MX_GPIO_Init+0x2b4>)
 80012b0:	f000 fed6 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012b4:	2310      	movs	r3, #16
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c4:	2306      	movs	r3, #6
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4852      	ldr	r0, [pc, #328]	; (8001418 <MX_GPIO_Init+0x2b4>)
 80012d0:	f000 fec6 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012d4:	23e0      	movs	r3, #224	; 0xe0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e4:	2305      	movs	r3, #5
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	484a      	ldr	r0, [pc, #296]	; (8001418 <MX_GPIO_Init+0x2b4>)
 80012f0:	f000 feb6 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012f4:	2304      	movs	r3, #4
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4845      	ldr	r0, [pc, #276]	; (800141c <MX_GPIO_Init+0x2b8>)
 8001308:	f000 feaa 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800130c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131e:	2305      	movs	r3, #5
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	483c      	ldr	r0, [pc, #240]	; (800141c <MX_GPIO_Init+0x2b8>)
 800132a:	f000 fe99 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|Audio_RST_Pin;
 800132e:	f243 0310 	movw	r3, #12304	; 0x3010
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4833      	ldr	r0, [pc, #204]	; (8001414 <MX_GPIO_Init+0x2b0>)
 8001348:	f000 fe8a 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800134c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800135e:	2306      	movs	r3, #6
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4829      	ldr	r0, [pc, #164]	; (8001410 <MX_GPIO_Init+0x2ac>)
 800136a:	f000 fe79 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800136e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4825      	ldr	r0, [pc, #148]	; (8001418 <MX_GPIO_Init+0x2b4>)
 8001384:	f000 fe6c 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001388:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800139a:	230a      	movs	r3, #10
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481c      	ldr	r0, [pc, #112]	; (8001418 <MX_GPIO_Init+0x2b4>)
 80013a6:	f000 fe5b 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013aa:	2320      	movs	r3, #32
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4815      	ldr	r0, [pc, #84]	; (8001414 <MX_GPIO_Init+0x2b0>)
 80013be:	f000 fe4f 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d4:	2304      	movs	r3, #4
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <MX_GPIO_Init+0x2b8>)
 80013e0:	f000 fe3e 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_GPIO_Init+0x2a8>)
 80013fa:	f000 fe31 	bl	8002060 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	; 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40021000 	.word	0x40021000
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800146a:	2007      	movs	r0, #7
 800146c:	f000 fa46 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <HAL_TIM_Base_MspInit+0x98>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d13d      	bne.n	800150a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_TIM_Base_MspInit+0x9c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a20      	ldr	r2, [pc, #128]	; (8001518 <HAL_TIM_Base_MspInit+0x9c>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_TIM_Base_MspInit+0x9c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_TIM_Base_MspInit+0xa4>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_DISABLE;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d8:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 80014f0:	f000 fa46 	bl	8001980 <HAL_DMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80014fa:	f7ff ff91 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_TIM_Base_MspInit+0xa0>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40000800 	.word	0x40000800
 8001518:	40023800 	.word	0x40023800
 800151c:	20000074 	.word	0x20000074
 8001520:	400260b8 	.word	0x400260b8

08001524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_TIM_MspPostInit+0x68>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d11e      	bne.n	8001584 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_TIM_MspPostInit+0x6c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_TIM_MspPostInit+0x6c>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_TIM_MspPostInit+0x6c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001562:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001566:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001574:	2302      	movs	r3, #2
 8001576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <HAL_TIM_MspPostInit+0x70>)
 8001580:	f000 fd6e 	bl	8002060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40000800 	.word	0x40000800
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 f89a 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA1_Stream7_IRQHandler+0x10>)
 80015f2:	f000 facb 	bl	8001b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000074 	.word	0x20000074

08001600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001640:	4c0b      	ldr	r4, [pc, #44]	; (8001670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800164e:	f7ff ffd7 	bl	8001600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001652:	f003 fc9b 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001656:	f7ff fc5b 	bl	8000f10 <main>
  bx  lr    
 800165a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800165c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001668:	08005200 	.word	0x08005200
  ldr r2, =_sbss
 800166c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001670:	200000dc 	.word	0x200000dc

08001674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC_IRQHandler>
	...

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <HAL_Init+0x40>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_Init+0x40>)
 800168e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_Init+0x40>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 f92b 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f808 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ac:	f7ff febe 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f943 	bl	8001966 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f90b 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000004 	.word	0x20000004
 8001714:	2000000c 	.word	0x2000000c
 8001718:	20000008 	.word	0x20000008

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000000c 	.word	0x2000000c
 8001740:	200000d8 	.word	0x200000d8

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200000d8 	.word	0x200000d8

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff feda 	bl	8001744 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e099      	b.n	8001ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019bc:	e00f      	b.n	80019de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019be:	f7ff fec1 	bl	8001744 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d908      	bls.n	80019de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2203      	movs	r2, #3
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e078      	b.n	8001ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e8      	bne.n	80019be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_DMA_Init+0x158>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d107      	bne.n	8001a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4313      	orrs	r3, r2
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f023 0307 	bic.w	r3, r3, #7
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d117      	bne.n	8001aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00e      	beq.n	8001aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa6f 	bl	8001f68 <DMA_CheckFifoParam>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e016      	b.n	8001ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fa26 	bl	8001efc <DMA_CalcBaseAndBitshift>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	223f      	movs	r2, #63	; 0x3f
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	f010803f 	.word	0xf010803f

08001adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_DMA_Start_IT+0x26>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e040      	b.n	8001b84 <HAL_DMA_Start_IT+0xa8>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d12f      	bne.n	8001b76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f9b8 	bl	8001ea0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	223f      	movs	r2, #63	; 0x3f
 8001b36:	409a      	lsls	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0216 	orr.w	r2, r2, #22
 8001b4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0208 	orr.w	r2, r2, #8
 8001b62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e005      	b.n	8001b82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b98:	4b8e      	ldr	r3, [pc, #568]	; (8001dd4 <HAL_DMA_IRQHandler+0x248>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a8e      	ldr	r2, [pc, #568]	; (8001dd8 <HAL_DMA_IRQHandler+0x24c>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01a      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0204 	bic.w	r2, r2, #4
 8001bde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	2208      	movs	r2, #8
 8001be6:	409a      	lsls	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d012      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f043 0202 	orr.w	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2204      	movs	r2, #4
 8001c34:	409a      	lsls	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00b      	beq.n	8001c64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	2204      	movs	r2, #4
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	f043 0204 	orr.w	r2, r3, #4
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	2210      	movs	r2, #16
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d043      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d03c      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	2210      	movs	r2, #16
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d018      	beq.n	8001cce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d108      	bne.n	8001cbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d024      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
 8001cba:	e01f      	b.n	8001cfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
 8001ccc:	e016      	b.n	8001cfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0208 	bic.w	r2, r2, #8
 8001cea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2220      	movs	r2, #32
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 808f 	beq.w	8001e2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8087 	beq.w	8001e2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2220      	movs	r2, #32
 8001d24:	409a      	lsls	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d136      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0216 	bic.w	r2, r2, #22
 8001d44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_DMA_IRQHandler+0x1da>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0208 	bic.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	223f      	movs	r2, #63	; 0x3f
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d07e      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
        }
        return;
 8001da2:	e079      	b.n	8001e98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01d      	beq.n	8001dee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10d      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d031      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e02c      	b.n	8001e2c <HAL_DMA_IRQHandler+0x2a0>
 8001dd2:	bf00      	nop
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
 8001dec:	e01e      	b.n	8001e2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10f      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0210 	bic.w	r2, r2, #16
 8001e0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d032      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d022      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2205      	movs	r2, #5
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d307      	bcc.n	8001e74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f2      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x2cc>
 8001e72:	e000      	b.n	8001e76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
 8001e96:	e000      	b.n	8001e9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e98:	bf00      	nop
    }
  }
}
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d108      	bne.n	8001ee0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ede:	e007      	b.n	8001ef0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3b10      	subs	r3, #16
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <DMA_CalcBaseAndBitshift+0x64>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <DMA_CalcBaseAndBitshift+0x68>)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d909      	bls.n	8001f3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	1d1a      	adds	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f3c:	e007      	b.n	8001f4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	aaaaaaab 	.word	0xaaaaaaab
 8001f64:	08005010 	.word	0x08005010

08001f68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11f      	bne.n	8001fc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d856      	bhi.n	8002036 <DMA_CheckFifoParam+0xce>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <DMA_CheckFifoParam+0x28>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fb3 	.word	0x08001fb3
 8001f98:	08001fa1 	.word	0x08001fa1
 8001f9c:	08002037 	.word	0x08002037
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d046      	beq.n	800203a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb0:	e043      	b.n	800203a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fba:	d140      	bne.n	800203e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e03d      	b.n	800203e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fca:	d121      	bne.n	8002010 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d837      	bhi.n	8002042 <DMA_CheckFifoParam+0xda>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <DMA_CheckFifoParam+0x70>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001fe9 	.word	0x08001fe9
 8001fe4:	08002001 	.word	0x08002001
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      break;
 8001fec:	e030      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d025      	beq.n	8002046 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffe:	e022      	b.n	8002046 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002008:	d11f      	bne.n	800204a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800200e:	e01c      	b.n	800204a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d903      	bls.n	800201e <DMA_CheckFifoParam+0xb6>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d003      	beq.n	8002024 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800201c:	e018      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
      break;
 8002022:	e015      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00e      	beq.n	800204e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      break;
 8002034:	e00b      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;
 8002036:	bf00      	nop
 8002038:	e00a      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      break;
 800203a:	bf00      	nop
 800203c:	e008      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
 8002040:	e006      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e004      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e002      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      break;   
 800204a:	bf00      	nop
 800204c:	e000      	b.n	8002050 <DMA_CheckFifoParam+0xe8>
      break;
 800204e:	bf00      	nop
    }
  } 
  
  return status; 
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e16b      	b.n	8002354 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 815a 	bne.w	800234e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d130      	bne.n	8002114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80b4 	beq.w	800234e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b60      	ldr	r3, [pc, #384]	; (800236c <HAL_GPIO_Init+0x30c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a5f      	ldr	r2, [pc, #380]	; (800236c <HAL_GPIO_Init+0x30c>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_GPIO_Init+0x30c>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <HAL_GPIO_Init+0x310>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_GPIO_Init+0x314>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02b      	beq.n	8002286 <HAL_GPIO_Init+0x226>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a51      	ldr	r2, [pc, #324]	; (8002378 <HAL_GPIO_Init+0x318>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d025      	beq.n	8002282 <HAL_GPIO_Init+0x222>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_GPIO_Init+0x31c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01f      	beq.n	800227e <HAL_GPIO_Init+0x21e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	; (8002380 <HAL_GPIO_Init+0x320>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x21a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <HAL_GPIO_Init+0x324>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x216>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <HAL_GPIO_Init+0x328>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x212>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4c      	ldr	r2, [pc, #304]	; (800238c <HAL_GPIO_Init+0x32c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4b      	ldr	r2, [pc, #300]	; (8002390 <HAL_GPIO_Init+0x330>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x20a>
 8002266:	2307      	movs	r3, #7
 8002268:	e00e      	b.n	8002288 <HAL_GPIO_Init+0x228>
 800226a:	2308      	movs	r3, #8
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x228>
 800226e:	2306      	movs	r3, #6
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x228>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x228>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x228>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x228>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x228>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x228>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	; (8002370 <HAL_GPIO_Init+0x310>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_GPIO_Init+0x334>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <HAL_GPIO_Init+0x334>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_GPIO_Init+0x334>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a27      	ldr	r2, [pc, #156]	; (8002394 <HAL_GPIO_Init+0x334>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_GPIO_Init+0x334>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_GPIO_Init+0x334>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_GPIO_Init+0x334>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a12      	ldr	r2, [pc, #72]	; (8002394 <HAL_GPIO_Init+0x334>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae90 	bls.w	800207c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40021c00 	.word	0x40021c00
 8002394:	40013c00 	.word	0x40013c00

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b4:	e003      	b.n	80023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	041a      	lsls	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e267      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d075      	beq.n	80024d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d00c      	beq.n	8002410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f6:	4b85      	ldr	r3, [pc, #532]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d112      	bne.n	8002428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240e:	d10b      	bne.n	8002428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	4b7e      	ldr	r3, [pc, #504]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05b      	beq.n	80024d4 <HAL_RCC_OscConfig+0x108>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d157      	bne.n	80024d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e242      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x74>
 8002432:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a75      	ldr	r2, [pc, #468]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e01d      	b.n	800247c <HAL_RCC_OscConfig+0xb0>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x98>
 800244a:	4b70      	ldr	r3, [pc, #448]	; (800260c <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6f      	ldr	r2, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b6d      	ldr	r3, [pc, #436]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6c      	ldr	r2, [pc, #432]	; (800260c <HAL_RCC_OscConfig+0x240>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0xb0>
 8002464:	4b69      	ldr	r3, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a68      	ldr	r2, [pc, #416]	; (800260c <HAL_RCC_OscConfig+0x240>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a65      	ldr	r2, [pc, #404]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff f95e 	bl	8001744 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff f95a 	bl	8001744 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e207      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0xc0>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff f94a 	bl	8001744 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f946 	bl	8001744 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1f3      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0xe8>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d063      	beq.n	80025aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d11c      	bne.n	8002534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x152>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e1c7      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4937      	ldr	r1, [pc, #220]	; (800260c <HAL_RCC_OscConfig+0x240>)
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	e03a      	b.n	80025aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_RCC_OscConfig+0x244>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7ff f8ff 	bl	8001744 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff f8fb 	bl	8001744 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e1a8      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_RCC_OscConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4925      	ldr	r1, [pc, #148]	; (800260c <HAL_RCC_OscConfig+0x240>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCC_OscConfig+0x244>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff f8de 	bl	8001744 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258c:	f7ff f8da 	bl	8001744 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e187      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d036      	beq.n	8002624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_RCC_OscConfig+0x248>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7ff f8be 	bl	8001744 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025cc:	f7ff f8ba 	bl	8001744 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e167      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_OscConfig+0x240>)
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x200>
 80025ea:	e01b      	b.n	8002624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCC_OscConfig+0x248>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7ff f8a7 	bl	8001744 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	e00e      	b.n	8002618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fa:	f7ff f8a3 	bl	8001744 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d907      	bls.n	8002618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e150      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
 800260c:	40023800 	.word	0x40023800
 8002610:	42470000 	.word	0x42470000
 8002614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0x470>)
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ea      	bne.n	80025fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8097 	beq.w	8002760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002636:	4b81      	ldr	r3, [pc, #516]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b7d      	ldr	r3, [pc, #500]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a7c      	ldr	r2, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0x470>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	4b77      	ldr	r3, [pc, #476]	; (8002840 <HAL_RCC_OscConfig+0x474>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d118      	bne.n	80026a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266e:	4b74      	ldr	r3, [pc, #464]	; (8002840 <HAL_RCC_OscConfig+0x474>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a73      	ldr	r2, [pc, #460]	; (8002840 <HAL_RCC_OscConfig+0x474>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267a:	f7ff f863 	bl	8001744 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7ff f85f 	bl	8001744 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e10c      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x474>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2ea>
 80026a8:	4b64      	ldr	r3, [pc, #400]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a63      	ldr	r2, [pc, #396]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	e01c      	b.n	80026f0 <HAL_RCC_OscConfig+0x324>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x30c>
 80026be:	4b5f      	ldr	r3, [pc, #380]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a5e      	ldr	r2, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a5b      	ldr	r2, [pc, #364]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x324>
 80026d8:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d015      	beq.n	8002724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7ff f824 	bl	8001744 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7ff f820 	bl	8001744 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0cb      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ee      	beq.n	8002700 <HAL_RCC_OscConfig+0x334>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff f80e 	bl	8001744 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff f80a 	bl	8001744 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0b5      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	4b3e      	ldr	r3, [pc, #248]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ee      	bne.n	800272c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	4a38      	ldr	r2, [pc, #224]	; (800283c <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a1 	beq.w	80028ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276a:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x470>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d05c      	beq.n	8002830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d141      	bne.n	8002802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_RCC_OscConfig+0x478>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe ffde 	bl	8001744 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe ffda 	bl	8001744 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e087      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	491b      	ldr	r1, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x478>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe ffb3 	bl	8001744 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe ffaf 	bl	8001744 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e05c      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_RCC_OscConfig+0x470>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x416>
 8002800:	e054      	b.n	80028ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_RCC_OscConfig+0x478>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe ff9c 	bl	8001744 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe ff98 	bl	8001744 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e045      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_OscConfig+0x470>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x444>
 800282e:	e03d      	b.n	80028ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d107      	bne.n	8002848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e038      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000
 8002844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x4ec>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d028      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d121      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d11a      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002878:	4013      	ands	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800287e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002880:	4293      	cmp	r3, r2
 8002882:	d111      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	3b01      	subs	r3, #1
 8002892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0cc      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d90c      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b8      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	494d      	ldr	r1, [pc, #308]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d044      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d119      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e067      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4934      	ldr	r1, [pc, #208]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fe feca 	bl	8001744 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fe fec6 	bl	8001744 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e04f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d20c      	bcs.n	8002a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e032      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4916      	ldr	r1, [pc, #88]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	490e      	ldr	r1, [pc, #56]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a42:	f000 f821 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	490a      	ldr	r1, [pc, #40]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fe2a 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023c00 	.word	0x40023c00
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08005000 	.word	0x08005000
 8002a80:	20000004 	.word	0x20000004
 8002a84:	20000008 	.word	0x20000008

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b094      	sub	sp, #80	; 0x50
 8002a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	647b      	str	r3, [r7, #68]	; 0x44
 8002a94:	2300      	movs	r3, #0
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a98:	2300      	movs	r3, #0
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa0:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	f200 80e1 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x34>
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aba:	e0db      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ac0:	e0db      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ac6:	e0d8      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac8:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 8002af2:	2300      	movs	r3, #0
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
 8002af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002afa:	4622      	mov	r2, r4
 8002afc:	462b      	mov	r3, r5
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	0159      	lsls	r1, r3, #5
 8002b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0c:	0150      	lsls	r0, r2, #5
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4621      	mov	r1, r4
 8002b14:	1a51      	subs	r1, r2, r1
 8002b16:	6139      	str	r1, [r7, #16]
 8002b18:	4629      	mov	r1, r5
 8002b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	018b      	lsls	r3, r1, #6
 8002b30:	4651      	mov	r1, sl
 8002b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b36:	4651      	mov	r1, sl
 8002b38:	018a      	lsls	r2, r1, #6
 8002b3a:	4651      	mov	r1, sl
 8002b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b40:	4659      	mov	r1, fp
 8002b42:	eb63 0901 	sbc.w	r9, r3, r1
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	eb18 0303 	adds.w	r3, r8, r3
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	462b      	mov	r3, r5
 8002b68:	eb49 0303 	adc.w	r3, r9, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	024b      	lsls	r3, r1, #9
 8002b7e:	4621      	mov	r1, r4
 8002b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b84:	4621      	mov	r1, r4
 8002b86:	024a      	lsls	r2, r1, #9
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	2200      	movs	r2, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b98:	f7fd ffb4 	bl	8000b04 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba4:	e058      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	0159      	lsls	r1, r3, #5
 8002bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd2:	0150      	lsls	r0, r2, #5
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4641      	mov	r1, r8
 8002bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bde:	4649      	mov	r1, r9
 8002be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	00eb      	lsls	r3, r5, #3
 8002c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0e:	00e2      	lsls	r2, r4, #3
 8002c10:	4614      	mov	r4, r2
 8002c12:	461d      	mov	r5, r3
 8002c14:	4643      	mov	r3, r8
 8002c16:	18e3      	adds	r3, r4, r3
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	eb45 0303 	adc.w	r3, r5, r3
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	028b      	lsls	r3, r1, #10
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c38:	4621      	mov	r1, r4
 8002c3a:	028a      	lsls	r2, r1, #10
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	61fa      	str	r2, [r7, #28]
 8002c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c4c:	f7fd ff5a 	bl	8000b04 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3750      	adds	r7, #80	; 0x50
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fbde 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fd84 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e041      	b.n	8002dc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f839 	bl	8002dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f000 fd35 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_TIM_PWM_Start+0x24>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e022      	b.n	8002e4e <HAL_TIM_PWM_Start+0x6a>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d109      	bne.n	8002e22 <HAL_TIM_PWM_Start+0x3e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	e015      	b.n	8002e4e <HAL_TIM_PWM_Start+0x6a>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d109      	bne.n	8002e3c <HAL_TIM_PWM_Start+0x58>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e008      	b.n	8002e4e <HAL_TIM_PWM_Start+0x6a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07c      	b.n	8002f50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_PWM_Start+0x82>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e64:	e013      	b.n	8002e8e <HAL_TIM_PWM_Start+0xaa>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x92>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e74:	e00b      	b.n	8002e8e <HAL_TIM_PWM_Start+0xaa>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xa2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e84:	e003      	b.n	8002e8e <HAL_TIM_PWM_Start+0xaa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2201      	movs	r2, #1
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ff8c 	bl	8003db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <HAL_TIM_PWM_Start+0x174>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_PWM_Start+0xcc>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <HAL_TIM_PWM_Start+0x178>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIM_PWM_Start+0xd0>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_TIM_PWM_Start+0xd2>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_TIM_PWM_Start+0x174>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d01d      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_TIM_PWM_Start+0x17c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <HAL_TIM_PWM_Start+0x180>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_TIM_PWM_Start+0x184>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <HAL_TIM_PWM_Start+0x178>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_TIM_PWM_Start+0x188>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIM_PWM_Start+0x136>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIM_PWM_Start+0x18c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d111      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b06      	cmp	r3, #6
 8002f2a:	d010      	beq.n	8002f4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	e007      	b.n	8002f4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40010400 	.word	0x40010400
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40001800 	.word	0x40001800

08002f74 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start_DMA+0x46>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start_DMA+0x60>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e171      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_TIM_PWM_Start_DMA+0x94>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e022      	b.n	800304e <HAL_TIM_PWM_Start_DMA+0xda>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d109      	bne.n	8003022 <HAL_TIM_PWM_Start_DMA+0xae>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e015      	b.n	800304e <HAL_TIM_PWM_Start_DMA+0xda>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e008      	b.n	800304e <HAL_TIM_PWM_Start_DMA+0xda>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d024      	beq.n	800309c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_TIM_PWM_Start_DMA+0xee>
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e137      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003070:	e016      	b.n	80030a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d104      	bne.n	8003082 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003080:	e00e      	b.n	80030a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d104      	bne.n	8003092 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003090:	e006      	b.n	80030a0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800309a:	e001      	b.n	80030a0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e118      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	f200 80ae 	bhi.w	8003204 <HAL_TIM_PWM_Start_DMA+0x290>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	08003205 	.word	0x08003205
 80030b8:	08003205 	.word	0x08003205
 80030bc:	08003205 	.word	0x08003205
 80030c0:	0800312d 	.word	0x0800312d
 80030c4:	08003205 	.word	0x08003205
 80030c8:	08003205 	.word	0x08003205
 80030cc:	08003205 	.word	0x08003205
 80030d0:	08003175 	.word	0x08003175
 80030d4:	08003205 	.word	0x08003205
 80030d8:	08003205 	.word	0x08003205
 80030dc:	08003205 	.word	0x08003205
 80030e0:	080031bd 	.word	0x080031bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <HAL_TIM_PWM_Start_DMA+0x368>)
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	4a7b      	ldr	r2, [pc, #492]	; (80032e0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4a7a      	ldr	r2, [pc, #488]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80030fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3334      	adds	r3, #52	; 0x34
 8003108:	461a      	mov	r2, r3
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	f7fe fce6 	bl	8001adc <HAL_DMA_Start_IT>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0db      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	60da      	str	r2, [r3, #12]
      break;
 800312a:	e06e      	b.n	800320a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	4a6a      	ldr	r2, [pc, #424]	; (80032dc <HAL_TIM_PWM_Start_DMA+0x368>)
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	4a69      	ldr	r2, [pc, #420]	; (80032e0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003142:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3338      	adds	r3, #56	; 0x38
 8003150:	461a      	mov	r2, r3
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	f7fe fcc2 	bl	8001adc <HAL_DMA_Start_IT>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0b7      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003170:	60da      	str	r2, [r3, #12]
      break;
 8003172:	e04a      	b.n	800320a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4a58      	ldr	r2, [pc, #352]	; (80032dc <HAL_TIM_PWM_Start_DMA+0x368>)
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800318a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	333c      	adds	r3, #60	; 0x3c
 8003198:	461a      	mov	r2, r3
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	f7fe fc9e 	bl	8001adc <HAL_DMA_Start_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e093      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b8:	60da      	str	r2, [r3, #12]
      break;
 80031ba:	e026      	b.n	800320a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a46      	ldr	r2, [pc, #280]	; (80032dc <HAL_TIM_PWM_Start_DMA+0x368>)
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3340      	adds	r3, #64	; 0x40
 80031e0:	461a      	mov	r2, r3
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	f7fe fc7a 	bl	8001adc <HAL_DMA_Start_IT>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e06f      	b.n	80032d2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003200:	60da      	str	r2, [r3, #12]
      break;
 8003202:	e002      	b.n	800320a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
      break;
 8003208:	bf00      	nop
  }

  if (status == HAL_OK)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d15f      	bne.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fdcb 	bl	8003db4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x378>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d01d      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x378>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_TIM_PWM_Start_DMA+0x388>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x328>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d010      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	e007      	b.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	080036d1 	.word	0x080036d1
 80032e0:	08003779 	.word	0x08003779
 80032e4:	0800363f 	.word	0x0800363f
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40014000 	.word	0x40014000
 8003300:	40001800 	.word	0x40001800

08003304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800331e:	2302      	movs	r3, #2
 8003320:	e0ae      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	f200 809f 	bhi.w	8003470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800336d 	.word	0x0800336d
 800333c:	08003471 	.word	0x08003471
 8003340:	08003471 	.word	0x08003471
 8003344:	08003471 	.word	0x08003471
 8003348:	080033ad 	.word	0x080033ad
 800334c:	08003471 	.word	0x08003471
 8003350:	08003471 	.word	0x08003471
 8003354:	08003471 	.word	0x08003471
 8003358:	080033ef 	.word	0x080033ef
 800335c:	08003471 	.word	0x08003471
 8003360:	08003471 	.word	0x08003471
 8003364:	08003471 	.word	0x08003471
 8003368:	0800342f 	.word	0x0800342f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fad4 	bl	8003920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0208 	orr.w	r2, r2, #8
 8003386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6999      	ldr	r1, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]
      break;
 80033aa:	e064      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fb24 	bl	8003a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6999      	ldr	r1, [r3, #24]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	619a      	str	r2, [r3, #24]
      break;
 80033ec:	e043      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fb79 	bl	8003aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0208 	orr.w	r2, r2, #8
 8003408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0204 	bic.w	r2, r2, #4
 8003418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
      break;
 800342c:	e023      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fbcd 	bl	8003bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69d9      	ldr	r1, [r3, #28]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	61da      	str	r2, [r3, #28]
      break;
 800346e:	e002      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
      break;
 8003474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0b4      	b.n	800360e <HAL_TIM_ConfigClockSource+0x186>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d03e      	beq.n	800355c <HAL_TIM_ConfigClockSource+0xd4>
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e2:	f200 8087 	bhi.w	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ea:	f000 8086 	beq.w	80035fa <HAL_TIM_ConfigClockSource+0x172>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f2:	d87f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d01a      	beq.n	800352e <HAL_TIM_ConfigClockSource+0xa6>
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d87b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b60      	cmp	r3, #96	; 0x60
 80034fe:	d050      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003500:	2b60      	cmp	r3, #96	; 0x60
 8003502:	d877      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b50      	cmp	r3, #80	; 0x50
 8003506:	d03c      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xfa>
 8003508:	2b50      	cmp	r3, #80	; 0x50
 800350a:	d873      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d058      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d86f      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b30      	cmp	r3, #48	; 0x30
 8003516:	d064      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003518:	2b30      	cmp	r3, #48	; 0x30
 800351a:	d86b      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b20      	cmp	r3, #32
 800351e:	d060      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d867      	bhi.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05c      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	2b10      	cmp	r3, #16
 800352a:	d05a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	e062      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f000 fc19 	bl	8003d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
      break;
 800355a:	e04f      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f000 fc02 	bl	8003d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357e:	609a      	str	r2, [r3, #8]
      break;
 8003580:	e03c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 fb76 	bl	8003c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2150      	movs	r1, #80	; 0x50
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fbcf 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80035a0:	e02c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 fb95 	bl	8003cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2160      	movs	r1, #96	; 0x60
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fbbf 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80035c0:	e01c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f000 fb56 	bl	8003c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fbaf 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80035e0:	e00c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 fba6 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80035f2:	e003      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e000      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d107      	bne.n	8003666 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003664:	e02a      	b.n	80036bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2202      	movs	r2, #2
 8003674:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367e:	e01d      	b.n	80036bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d107      	bne.n	800369a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2204      	movs	r2, #4
 800368e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	e010      	b.n	80036bc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d107      	bne.n	80036b4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2208      	movs	r2, #8
 80036a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036b2:	e003      	b.n	80036bc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ffb4 	bl	800362a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10b      	bne.n	8003700 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d136      	bne.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fe:	e031      	b.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d10b      	bne.n	8003722 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2202      	movs	r2, #2
 800370e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d125      	bne.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	e020      	b.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d10b      	bne.n	8003744 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2204      	movs	r2, #4
 8003730:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d114      	bne.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003742:	e00f      	b.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d10a      	bne.n	8003764 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2208      	movs	r2, #8
 8003752:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7fd fb4f 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d103      	bne.n	8003798 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	771a      	strb	r2, [r3, #28]
 8003796:	e019      	b.n	80037cc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d103      	bne.n	80037aa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
 80037a8:	e010      	b.n	80037cc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d103      	bne.n	80037bc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2204      	movs	r2, #4
 80037b8:	771a      	strb	r2, [r3, #28]
 80037ba:	e007      	b.n	80037cc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d102      	bne.n	80037cc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2208      	movs	r2, #8
 80037ca:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff ff22 	bl	8003616 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a40      	ldr	r2, [pc, #256]	; (80038f4 <TIM_Base_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3d      	ldr	r2, [pc, #244]	; (80038f8 <TIM_Base_SetConfig+0x118>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3c      	ldr	r2, [pc, #240]	; (80038fc <TIM_Base_SetConfig+0x11c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <TIM_Base_SetConfig+0x120>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <TIM_Base_SetConfig+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <TIM_Base_SetConfig+0x114>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d027      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2c      	ldr	r2, [pc, #176]	; (80038f8 <TIM_Base_SetConfig+0x118>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d023      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <TIM_Base_SetConfig+0x11c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2a      	ldr	r2, [pc, #168]	; (8003900 <TIM_Base_SetConfig+0x120>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a29      	ldr	r2, [pc, #164]	; (8003904 <TIM_Base_SetConfig+0x124>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d017      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a28      	ldr	r2, [pc, #160]	; (8003908 <TIM_Base_SetConfig+0x128>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <TIM_Base_SetConfig+0x12c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <TIM_Base_SetConfig+0x130>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <TIM_Base_SetConfig+0x134>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <TIM_Base_SetConfig+0x138>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <TIM_Base_SetConfig+0x13c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <TIM_Base_SetConfig+0x114>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0xf8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <TIM_Base_SetConfig+0x124>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d103      	bne.n	80038e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	615a      	str	r2, [r3, #20]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40010400 	.word	0x40010400
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800
 8003914:	40001800 	.word	0x40001800
 8003918:	40001c00 	.word	0x40001c00
 800391c:	40002000 	.word	0x40002000

08003920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f023 0302 	bic.w	r3, r3, #2
 8003968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <TIM_OC1_SetConfig+0xd8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_OC1_SetConfig+0x64>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <TIM_OC1_SetConfig+0xdc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10c      	bne.n	800399e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0308 	bic.w	r3, r3, #8
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <TIM_OC1_SetConfig+0xd8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_OC1_SetConfig+0x8e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <TIM_OC1_SetConfig+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d111      	bne.n	80039d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40010400 	.word	0x40010400

08003a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0210 	bic.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0320 	bic.w	r3, r3, #32
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <TIM_OC2_SetConfig+0xe4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_OC2_SetConfig+0x68>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <TIM_OC2_SetConfig+0xe8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10d      	bne.n	8003a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <TIM_OC2_SetConfig+0xe4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_OC2_SetConfig+0x94>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <TIM_OC2_SetConfig+0xe8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d113      	bne.n	8003abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40010400 	.word	0x40010400

08003aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <TIM_OC3_SetConfig+0xe0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_OC3_SetConfig+0x66>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <TIM_OC3_SetConfig+0xe0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC3_SetConfig+0x92>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d113      	bne.n	8003ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40010400 	.word	0x40010400

08003bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	031b      	lsls	r3, r3, #12
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <TIM_OC4_SetConfig+0xa4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC4_SetConfig+0x68>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <TIM_OC4_SetConfig+0xa8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 030a 	bic.w	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0210 	bic.w	r2, r3, #16
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f043 0307 	orr.w	r3, r3, #7
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e05a      	b.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d022      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d01d      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a15      	ldr	r2, [pc, #84]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10c      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40010400 	.word	0x40010400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40001800 	.word	0x40001800

08003ef8 <sin>:
 8003ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003efa:	ec53 2b10 	vmov	r2, r3, d0
 8003efe:	4828      	ldr	r0, [pc, #160]	; (8003fa0 <sin+0xa8>)
 8003f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f04:	4281      	cmp	r1, r0
 8003f06:	dc07      	bgt.n	8003f18 <sin+0x20>
 8003f08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003f98 <sin+0xa0>
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	b005      	add	sp, #20
 8003f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f14:	f000 be6c 	b.w	8004bf0 <__kernel_sin>
 8003f18:	4822      	ldr	r0, [pc, #136]	; (8003fa4 <sin+0xac>)
 8003f1a:	4281      	cmp	r1, r0
 8003f1c:	dd09      	ble.n	8003f32 <sin+0x3a>
 8003f1e:	ee10 0a10 	vmov	r0, s0
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7fc f954 	bl	80001d0 <__aeabi_dsub>
 8003f28:	ec41 0b10 	vmov	d0, r0, r1
 8003f2c:	b005      	add	sp, #20
 8003f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f32:	4668      	mov	r0, sp
 8003f34:	f000 f838 	bl	8003fa8 <__ieee754_rem_pio2>
 8003f38:	f000 0003 	and.w	r0, r0, #3
 8003f3c:	2801      	cmp	r0, #1
 8003f3e:	d00c      	beq.n	8003f5a <sin+0x62>
 8003f40:	2802      	cmp	r0, #2
 8003f42:	d011      	beq.n	8003f68 <sin+0x70>
 8003f44:	b9f0      	cbnz	r0, 8003f84 <sin+0x8c>
 8003f46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f4a:	ed9d 0b00 	vldr	d0, [sp]
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f000 fe4e 	bl	8004bf0 <__kernel_sin>
 8003f54:	ec51 0b10 	vmov	r0, r1, d0
 8003f58:	e7e6      	b.n	8003f28 <sin+0x30>
 8003f5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f5e:	ed9d 0b00 	vldr	d0, [sp]
 8003f62:	f000 fa2d 	bl	80043c0 <__kernel_cos>
 8003f66:	e7f5      	b.n	8003f54 <sin+0x5c>
 8003f68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f6c:	ed9d 0b00 	vldr	d0, [sp]
 8003f70:	2001      	movs	r0, #1
 8003f72:	f000 fe3d 	bl	8004bf0 <__kernel_sin>
 8003f76:	ec53 2b10 	vmov	r2, r3, d0
 8003f7a:	ee10 0a10 	vmov	r0, s0
 8003f7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f82:	e7d1      	b.n	8003f28 <sin+0x30>
 8003f84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f88:	ed9d 0b00 	vldr	d0, [sp]
 8003f8c:	f000 fa18 	bl	80043c0 <__kernel_cos>
 8003f90:	e7f1      	b.n	8003f76 <sin+0x7e>
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
	...
 8003fa0:	3fe921fb 	.word	0x3fe921fb
 8003fa4:	7fefffff 	.word	0x7fefffff

08003fa8 <__ieee754_rem_pio2>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	ed2d 8b02 	vpush	{d8}
 8003fb0:	ec55 4b10 	vmov	r4, r5, d0
 8003fb4:	4bca      	ldr	r3, [pc, #808]	; (80042e0 <__ieee754_rem_pio2+0x338>)
 8003fb6:	b08b      	sub	sp, #44	; 0x2c
 8003fb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003fbc:	4598      	cmp	r8, r3
 8003fbe:	4682      	mov	sl, r0
 8003fc0:	9502      	str	r5, [sp, #8]
 8003fc2:	dc08      	bgt.n	8003fd6 <__ieee754_rem_pio2+0x2e>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	ed80 0b00 	vstr	d0, [r0]
 8003fcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003fd0:	f04f 0b00 	mov.w	fp, #0
 8003fd4:	e028      	b.n	8004028 <__ieee754_rem_pio2+0x80>
 8003fd6:	4bc3      	ldr	r3, [pc, #780]	; (80042e4 <__ieee754_rem_pio2+0x33c>)
 8003fd8:	4598      	cmp	r8, r3
 8003fda:	dc78      	bgt.n	80040ce <__ieee754_rem_pio2+0x126>
 8003fdc:	9b02      	ldr	r3, [sp, #8]
 8003fde:	4ec2      	ldr	r6, [pc, #776]	; (80042e8 <__ieee754_rem_pio2+0x340>)
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	ee10 0a10 	vmov	r0, s0
 8003fe6:	a3b0      	add	r3, pc, #704	; (adr r3, 80042a8 <__ieee754_rem_pio2+0x300>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	4629      	mov	r1, r5
 8003fee:	dd39      	ble.n	8004064 <__ieee754_rem_pio2+0xbc>
 8003ff0:	f7fc f8ee 	bl	80001d0 <__aeabi_dsub>
 8003ff4:	45b0      	cmp	r8, r6
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	460d      	mov	r5, r1
 8003ffa:	d01b      	beq.n	8004034 <__ieee754_rem_pio2+0x8c>
 8003ffc:	a3ac      	add	r3, pc, #688	; (adr r3, 80042b0 <__ieee754_rem_pio2+0x308>)
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f7fc f8e5 	bl	80001d0 <__aeabi_dsub>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9ca 2300 	strd	r2, r3, [sl]
 800400e:	4620      	mov	r0, r4
 8004010:	4629      	mov	r1, r5
 8004012:	f7fc f8dd 	bl	80001d0 <__aeabi_dsub>
 8004016:	a3a6      	add	r3, pc, #664	; (adr r3, 80042b0 <__ieee754_rem_pio2+0x308>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc f8d8 	bl	80001d0 <__aeabi_dsub>
 8004020:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004024:	f04f 0b01 	mov.w	fp, #1
 8004028:	4658      	mov	r0, fp
 800402a:	b00b      	add	sp, #44	; 0x2c
 800402c:	ecbd 8b02 	vpop	{d8}
 8004030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	a3a0      	add	r3, pc, #640	; (adr r3, 80042b8 <__ieee754_rem_pio2+0x310>)
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f7fc f8c9 	bl	80001d0 <__aeabi_dsub>
 800403e:	a3a0      	add	r3, pc, #640	; (adr r3, 80042c0 <__ieee754_rem_pio2+0x318>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	4604      	mov	r4, r0
 8004046:	460d      	mov	r5, r1
 8004048:	f7fc f8c2 	bl	80001d0 <__aeabi_dsub>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	e9ca 2300 	strd	r2, r3, [sl]
 8004054:	4620      	mov	r0, r4
 8004056:	4629      	mov	r1, r5
 8004058:	f7fc f8ba 	bl	80001d0 <__aeabi_dsub>
 800405c:	a398      	add	r3, pc, #608	; (adr r3, 80042c0 <__ieee754_rem_pio2+0x318>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	e7db      	b.n	800401c <__ieee754_rem_pio2+0x74>
 8004064:	f7fc f8b6 	bl	80001d4 <__adddf3>
 8004068:	45b0      	cmp	r8, r6
 800406a:	4604      	mov	r4, r0
 800406c:	460d      	mov	r5, r1
 800406e:	d016      	beq.n	800409e <__ieee754_rem_pio2+0xf6>
 8004070:	a38f      	add	r3, pc, #572	; (adr r3, 80042b0 <__ieee754_rem_pio2+0x308>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f7fc f8ad 	bl	80001d4 <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	e9ca 2300 	strd	r2, r3, [sl]
 8004082:	4620      	mov	r0, r4
 8004084:	4629      	mov	r1, r5
 8004086:	f7fc f8a3 	bl	80001d0 <__aeabi_dsub>
 800408a:	a389      	add	r3, pc, #548	; (adr r3, 80042b0 <__ieee754_rem_pio2+0x308>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc f8a0 	bl	80001d4 <__adddf3>
 8004094:	f04f 3bff 	mov.w	fp, #4294967295
 8004098:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800409c:	e7c4      	b.n	8004028 <__ieee754_rem_pio2+0x80>
 800409e:	a386      	add	r3, pc, #536	; (adr r3, 80042b8 <__ieee754_rem_pio2+0x310>)
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f7fc f896 	bl	80001d4 <__adddf3>
 80040a8:	a385      	add	r3, pc, #532	; (adr r3, 80042c0 <__ieee754_rem_pio2+0x318>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	4604      	mov	r4, r0
 80040b0:	460d      	mov	r5, r1
 80040b2:	f7fc f88f 	bl	80001d4 <__adddf3>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	e9ca 2300 	strd	r2, r3, [sl]
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc f885 	bl	80001d0 <__aeabi_dsub>
 80040c6:	a37e      	add	r3, pc, #504	; (adr r3, 80042c0 <__ieee754_rem_pio2+0x318>)
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	e7e0      	b.n	8004090 <__ieee754_rem_pio2+0xe8>
 80040ce:	4b87      	ldr	r3, [pc, #540]	; (80042ec <__ieee754_rem_pio2+0x344>)
 80040d0:	4598      	cmp	r8, r3
 80040d2:	f300 80d9 	bgt.w	8004288 <__ieee754_rem_pio2+0x2e0>
 80040d6:	f000 fe49 	bl	8004d6c <fabs>
 80040da:	ec55 4b10 	vmov	r4, r5, d0
 80040de:	ee10 0a10 	vmov	r0, s0
 80040e2:	a379      	add	r3, pc, #484	; (adr r3, 80042c8 <__ieee754_rem_pio2+0x320>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	4629      	mov	r1, r5
 80040ea:	f7fc fa29 	bl	8000540 <__aeabi_dmul>
 80040ee:	4b80      	ldr	r3, [pc, #512]	; (80042f0 <__ieee754_rem_pio2+0x348>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	f7fc f86f 	bl	80001d4 <__adddf3>
 80040f6:	f7fc fcbd 	bl	8000a74 <__aeabi_d2iz>
 80040fa:	4683      	mov	fp, r0
 80040fc:	f7fc f9b6 	bl	800046c <__aeabi_i2d>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	ec43 2b18 	vmov	d8, r2, r3
 8004108:	a367      	add	r3, pc, #412	; (adr r3, 80042a8 <__ieee754_rem_pio2+0x300>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fa17 	bl	8000540 <__aeabi_dmul>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4620      	mov	r0, r4
 8004118:	4629      	mov	r1, r5
 800411a:	f7fc f859 	bl	80001d0 <__aeabi_dsub>
 800411e:	a364      	add	r3, pc, #400	; (adr r3, 80042b0 <__ieee754_rem_pio2+0x308>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	4606      	mov	r6, r0
 8004126:	460f      	mov	r7, r1
 8004128:	ec51 0b18 	vmov	r0, r1, d8
 800412c:	f7fc fa08 	bl	8000540 <__aeabi_dmul>
 8004130:	f1bb 0f1f 	cmp.w	fp, #31
 8004134:	4604      	mov	r4, r0
 8004136:	460d      	mov	r5, r1
 8004138:	dc0d      	bgt.n	8004156 <__ieee754_rem_pio2+0x1ae>
 800413a:	4b6e      	ldr	r3, [pc, #440]	; (80042f4 <__ieee754_rem_pio2+0x34c>)
 800413c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	4543      	cmp	r3, r8
 8004146:	d006      	beq.n	8004156 <__ieee754_rem_pio2+0x1ae>
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	4630      	mov	r0, r6
 800414e:	4639      	mov	r1, r7
 8004150:	f7fc f83e 	bl	80001d0 <__aeabi_dsub>
 8004154:	e00f      	b.n	8004176 <__ieee754_rem_pio2+0x1ce>
 8004156:	462b      	mov	r3, r5
 8004158:	4622      	mov	r2, r4
 800415a:	4630      	mov	r0, r6
 800415c:	4639      	mov	r1, r7
 800415e:	f7fc f837 	bl	80001d0 <__aeabi_dsub>
 8004162:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800416c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004170:	f1b8 0f10 	cmp.w	r8, #16
 8004174:	dc02      	bgt.n	800417c <__ieee754_rem_pio2+0x1d4>
 8004176:	e9ca 0100 	strd	r0, r1, [sl]
 800417a:	e039      	b.n	80041f0 <__ieee754_rem_pio2+0x248>
 800417c:	a34e      	add	r3, pc, #312	; (adr r3, 80042b8 <__ieee754_rem_pio2+0x310>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	ec51 0b18 	vmov	r0, r1, d8
 8004186:	f7fc f9db 	bl	8000540 <__aeabi_dmul>
 800418a:	4604      	mov	r4, r0
 800418c:	460d      	mov	r5, r1
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4630      	mov	r0, r6
 8004194:	4639      	mov	r1, r7
 8004196:	f7fc f81b 	bl	80001d0 <__aeabi_dsub>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4680      	mov	r8, r0
 80041a0:	4689      	mov	r9, r1
 80041a2:	4630      	mov	r0, r6
 80041a4:	4639      	mov	r1, r7
 80041a6:	f7fc f813 	bl	80001d0 <__aeabi_dsub>
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	f7fc f80f 	bl	80001d0 <__aeabi_dsub>
 80041b2:	a343      	add	r3, pc, #268	; (adr r3, 80042c0 <__ieee754_rem_pio2+0x318>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	4604      	mov	r4, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	ec51 0b18 	vmov	r0, r1, d8
 80041c0:	f7fc f9be 	bl	8000540 <__aeabi_dmul>
 80041c4:	4622      	mov	r2, r4
 80041c6:	462b      	mov	r3, r5
 80041c8:	f7fc f802 	bl	80001d0 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4604      	mov	r4, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	4640      	mov	r0, r8
 80041d6:	4649      	mov	r1, r9
 80041d8:	f7fb fffa 	bl	80001d0 <__aeabi_dsub>
 80041dc:	9a03      	ldr	r2, [sp, #12]
 80041de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b31      	cmp	r3, #49	; 0x31
 80041e6:	dc24      	bgt.n	8004232 <__ieee754_rem_pio2+0x28a>
 80041e8:	e9ca 0100 	strd	r0, r1, [sl]
 80041ec:	4646      	mov	r6, r8
 80041ee:	464f      	mov	r7, r9
 80041f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80041f4:	4630      	mov	r0, r6
 80041f6:	4642      	mov	r2, r8
 80041f8:	464b      	mov	r3, r9
 80041fa:	4639      	mov	r1, r7
 80041fc:	f7fb ffe8 	bl	80001d0 <__aeabi_dsub>
 8004200:	462b      	mov	r3, r5
 8004202:	4622      	mov	r2, r4
 8004204:	f7fb ffe4 	bl	80001d0 <__aeabi_dsub>
 8004208:	9b02      	ldr	r3, [sp, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004210:	f6bf af0a 	bge.w	8004028 <__ieee754_rem_pio2+0x80>
 8004214:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004218:	f8ca 3004 	str.w	r3, [sl, #4]
 800421c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004220:	f8ca 8000 	str.w	r8, [sl]
 8004224:	f8ca 0008 	str.w	r0, [sl, #8]
 8004228:	f8ca 300c 	str.w	r3, [sl, #12]
 800422c:	f1cb 0b00 	rsb	fp, fp, #0
 8004230:	e6fa      	b.n	8004028 <__ieee754_rem_pio2+0x80>
 8004232:	a327      	add	r3, pc, #156	; (adr r3, 80042d0 <__ieee754_rem_pio2+0x328>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	ec51 0b18 	vmov	r0, r1, d8
 800423c:	f7fc f980 	bl	8000540 <__aeabi_dmul>
 8004240:	4604      	mov	r4, r0
 8004242:	460d      	mov	r5, r1
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4640      	mov	r0, r8
 800424a:	4649      	mov	r1, r9
 800424c:	f7fb ffc0 	bl	80001d0 <__aeabi_dsub>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4606      	mov	r6, r0
 8004256:	460f      	mov	r7, r1
 8004258:	4640      	mov	r0, r8
 800425a:	4649      	mov	r1, r9
 800425c:	f7fb ffb8 	bl	80001d0 <__aeabi_dsub>
 8004260:	4622      	mov	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	f7fb ffb4 	bl	80001d0 <__aeabi_dsub>
 8004268:	a31b      	add	r3, pc, #108	; (adr r3, 80042d8 <__ieee754_rem_pio2+0x330>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	4604      	mov	r4, r0
 8004270:	460d      	mov	r5, r1
 8004272:	ec51 0b18 	vmov	r0, r1, d8
 8004276:	f7fc f963 	bl	8000540 <__aeabi_dmul>
 800427a:	4622      	mov	r2, r4
 800427c:	462b      	mov	r3, r5
 800427e:	f7fb ffa7 	bl	80001d0 <__aeabi_dsub>
 8004282:	4604      	mov	r4, r0
 8004284:	460d      	mov	r5, r1
 8004286:	e75f      	b.n	8004148 <__ieee754_rem_pio2+0x1a0>
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <__ieee754_rem_pio2+0x350>)
 800428a:	4598      	cmp	r8, r3
 800428c:	dd36      	ble.n	80042fc <__ieee754_rem_pio2+0x354>
 800428e:	ee10 2a10 	vmov	r2, s0
 8004292:	462b      	mov	r3, r5
 8004294:	4620      	mov	r0, r4
 8004296:	4629      	mov	r1, r5
 8004298:	f7fb ff9a 	bl	80001d0 <__aeabi_dsub>
 800429c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80042a0:	e9ca 0100 	strd	r0, r1, [sl]
 80042a4:	e694      	b.n	8003fd0 <__ieee754_rem_pio2+0x28>
 80042a6:	bf00      	nop
 80042a8:	54400000 	.word	0x54400000
 80042ac:	3ff921fb 	.word	0x3ff921fb
 80042b0:	1a626331 	.word	0x1a626331
 80042b4:	3dd0b461 	.word	0x3dd0b461
 80042b8:	1a600000 	.word	0x1a600000
 80042bc:	3dd0b461 	.word	0x3dd0b461
 80042c0:	2e037073 	.word	0x2e037073
 80042c4:	3ba3198a 	.word	0x3ba3198a
 80042c8:	6dc9c883 	.word	0x6dc9c883
 80042cc:	3fe45f30 	.word	0x3fe45f30
 80042d0:	2e000000 	.word	0x2e000000
 80042d4:	3ba3198a 	.word	0x3ba3198a
 80042d8:	252049c1 	.word	0x252049c1
 80042dc:	397b839a 	.word	0x397b839a
 80042e0:	3fe921fb 	.word	0x3fe921fb
 80042e4:	4002d97b 	.word	0x4002d97b
 80042e8:	3ff921fb 	.word	0x3ff921fb
 80042ec:	413921fb 	.word	0x413921fb
 80042f0:	3fe00000 	.word	0x3fe00000
 80042f4:	08005018 	.word	0x08005018
 80042f8:	7fefffff 	.word	0x7fefffff
 80042fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004300:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004304:	ee10 0a10 	vmov	r0, s0
 8004308:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800430c:	ee10 6a10 	vmov	r6, s0
 8004310:	460f      	mov	r7, r1
 8004312:	f7fc fbaf 	bl	8000a74 <__aeabi_d2iz>
 8004316:	f7fc f8a9 	bl	800046c <__aeabi_i2d>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4630      	mov	r0, r6
 8004320:	4639      	mov	r1, r7
 8004322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004326:	f7fb ff53 	bl	80001d0 <__aeabi_dsub>
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <__ieee754_rem_pio2+0x410>)
 800432c:	2200      	movs	r2, #0
 800432e:	f7fc f907 	bl	8000540 <__aeabi_dmul>
 8004332:	460f      	mov	r7, r1
 8004334:	4606      	mov	r6, r0
 8004336:	f7fc fb9d 	bl	8000a74 <__aeabi_d2iz>
 800433a:	f7fc f897 	bl	800046c <__aeabi_i2d>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4630      	mov	r0, r6
 8004344:	4639      	mov	r1, r7
 8004346:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800434a:	f7fb ff41 	bl	80001d0 <__aeabi_dsub>
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <__ieee754_rem_pio2+0x410>)
 8004350:	2200      	movs	r2, #0
 8004352:	f7fc f8f5 	bl	8000540 <__aeabi_dmul>
 8004356:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800435a:	ad04      	add	r5, sp, #16
 800435c:	f04f 0803 	mov.w	r8, #3
 8004360:	46a9      	mov	r9, r5
 8004362:	2600      	movs	r6, #0
 8004364:	2700      	movs	r7, #0
 8004366:	4632      	mov	r2, r6
 8004368:	463b      	mov	r3, r7
 800436a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800436e:	46c3      	mov	fp, r8
 8004370:	3d08      	subs	r5, #8
 8004372:	f108 38ff 	add.w	r8, r8, #4294967295
 8004376:	f7fc fb4b 	bl	8000a10 <__aeabi_dcmpeq>
 800437a:	2800      	cmp	r0, #0
 800437c:	d1f3      	bne.n	8004366 <__ieee754_rem_pio2+0x3be>
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <__ieee754_rem_pio2+0x414>)
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2302      	movs	r3, #2
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	4622      	mov	r2, r4
 8004388:	465b      	mov	r3, fp
 800438a:	4651      	mov	r1, sl
 800438c:	4648      	mov	r0, r9
 800438e:	f000 f8df 	bl	8004550 <__kernel_rem_pio2>
 8004392:	9b02      	ldr	r3, [sp, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	4683      	mov	fp, r0
 8004398:	f6bf ae46 	bge.w	8004028 <__ieee754_rem_pio2+0x80>
 800439c:	e9da 2100 	ldrd	r2, r1, [sl]
 80043a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043a4:	e9ca 2300 	strd	r2, r3, [sl]
 80043a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80043ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80043b4:	e73a      	b.n	800422c <__ieee754_rem_pio2+0x284>
 80043b6:	bf00      	nop
 80043b8:	41700000 	.word	0x41700000
 80043bc:	08005098 	.word	0x08005098

080043c0 <__kernel_cos>:
 80043c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	ec57 6b10 	vmov	r6, r7, d0
 80043c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80043cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80043d0:	ed8d 1b00 	vstr	d1, [sp]
 80043d4:	da07      	bge.n	80043e6 <__kernel_cos+0x26>
 80043d6:	ee10 0a10 	vmov	r0, s0
 80043da:	4639      	mov	r1, r7
 80043dc:	f7fc fb4a 	bl	8000a74 <__aeabi_d2iz>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	f000 8088 	beq.w	80044f6 <__kernel_cos+0x136>
 80043e6:	4632      	mov	r2, r6
 80043e8:	463b      	mov	r3, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	4639      	mov	r1, r7
 80043ee:	f7fc f8a7 	bl	8000540 <__aeabi_dmul>
 80043f2:	4b51      	ldr	r3, [pc, #324]	; (8004538 <__kernel_cos+0x178>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	4604      	mov	r4, r0
 80043f8:	460d      	mov	r5, r1
 80043fa:	f7fc f8a1 	bl	8000540 <__aeabi_dmul>
 80043fe:	a340      	add	r3, pc, #256	; (adr r3, 8004500 <__kernel_cos+0x140>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	4682      	mov	sl, r0
 8004406:	468b      	mov	fp, r1
 8004408:	4620      	mov	r0, r4
 800440a:	4629      	mov	r1, r5
 800440c:	f7fc f898 	bl	8000540 <__aeabi_dmul>
 8004410:	a33d      	add	r3, pc, #244	; (adr r3, 8004508 <__kernel_cos+0x148>)
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f7fb fedd 	bl	80001d4 <__adddf3>
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	f7fc f88f 	bl	8000540 <__aeabi_dmul>
 8004422:	a33b      	add	r3, pc, #236	; (adr r3, 8004510 <__kernel_cos+0x150>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f7fb fed2 	bl	80001d0 <__aeabi_dsub>
 800442c:	4622      	mov	r2, r4
 800442e:	462b      	mov	r3, r5
 8004430:	f7fc f886 	bl	8000540 <__aeabi_dmul>
 8004434:	a338      	add	r3, pc, #224	; (adr r3, 8004518 <__kernel_cos+0x158>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fb fecb 	bl	80001d4 <__adddf3>
 800443e:	4622      	mov	r2, r4
 8004440:	462b      	mov	r3, r5
 8004442:	f7fc f87d 	bl	8000540 <__aeabi_dmul>
 8004446:	a336      	add	r3, pc, #216	; (adr r3, 8004520 <__kernel_cos+0x160>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fb fec0 	bl	80001d0 <__aeabi_dsub>
 8004450:	4622      	mov	r2, r4
 8004452:	462b      	mov	r3, r5
 8004454:	f7fc f874 	bl	8000540 <__aeabi_dmul>
 8004458:	a333      	add	r3, pc, #204	; (adr r3, 8004528 <__kernel_cos+0x168>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fb feb9 	bl	80001d4 <__adddf3>
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	f7fc f86b 	bl	8000540 <__aeabi_dmul>
 800446a:	4622      	mov	r2, r4
 800446c:	462b      	mov	r3, r5
 800446e:	f7fc f867 	bl	8000540 <__aeabi_dmul>
 8004472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004476:	4604      	mov	r4, r0
 8004478:	460d      	mov	r5, r1
 800447a:	4630      	mov	r0, r6
 800447c:	4639      	mov	r1, r7
 800447e:	f7fc f85f 	bl	8000540 <__aeabi_dmul>
 8004482:	460b      	mov	r3, r1
 8004484:	4602      	mov	r2, r0
 8004486:	4629      	mov	r1, r5
 8004488:	4620      	mov	r0, r4
 800448a:	f7fb fea1 	bl	80001d0 <__aeabi_dsub>
 800448e:	4b2b      	ldr	r3, [pc, #172]	; (800453c <__kernel_cos+0x17c>)
 8004490:	4598      	cmp	r8, r3
 8004492:	4606      	mov	r6, r0
 8004494:	460f      	mov	r7, r1
 8004496:	dc10      	bgt.n	80044ba <__kernel_cos+0xfa>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4650      	mov	r0, sl
 800449e:	4659      	mov	r1, fp
 80044a0:	f7fb fe96 	bl	80001d0 <__aeabi_dsub>
 80044a4:	460b      	mov	r3, r1
 80044a6:	4926      	ldr	r1, [pc, #152]	; (8004540 <__kernel_cos+0x180>)
 80044a8:	4602      	mov	r2, r0
 80044aa:	2000      	movs	r0, #0
 80044ac:	f7fb fe90 	bl	80001d0 <__aeabi_dsub>
 80044b0:	ec41 0b10 	vmov	d0, r0, r1
 80044b4:	b003      	add	sp, #12
 80044b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <__kernel_cos+0x184>)
 80044bc:	4920      	ldr	r1, [pc, #128]	; (8004540 <__kernel_cos+0x180>)
 80044be:	4598      	cmp	r8, r3
 80044c0:	bfcc      	ite	gt
 80044c2:	4d21      	ldrgt	r5, [pc, #132]	; (8004548 <__kernel_cos+0x188>)
 80044c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80044c8:	2400      	movs	r4, #0
 80044ca:	4622      	mov	r2, r4
 80044cc:	462b      	mov	r3, r5
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fb fe7e 	bl	80001d0 <__aeabi_dsub>
 80044d4:	4622      	mov	r2, r4
 80044d6:	4680      	mov	r8, r0
 80044d8:	4689      	mov	r9, r1
 80044da:	462b      	mov	r3, r5
 80044dc:	4650      	mov	r0, sl
 80044de:	4659      	mov	r1, fp
 80044e0:	f7fb fe76 	bl	80001d0 <__aeabi_dsub>
 80044e4:	4632      	mov	r2, r6
 80044e6:	463b      	mov	r3, r7
 80044e8:	f7fb fe72 	bl	80001d0 <__aeabi_dsub>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4640      	mov	r0, r8
 80044f2:	4649      	mov	r1, r9
 80044f4:	e7da      	b.n	80044ac <__kernel_cos+0xec>
 80044f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004530 <__kernel_cos+0x170>
 80044fa:	e7db      	b.n	80044b4 <__kernel_cos+0xf4>
 80044fc:	f3af 8000 	nop.w
 8004500:	be8838d4 	.word	0xbe8838d4
 8004504:	bda8fae9 	.word	0xbda8fae9
 8004508:	bdb4b1c4 	.word	0xbdb4b1c4
 800450c:	3e21ee9e 	.word	0x3e21ee9e
 8004510:	809c52ad 	.word	0x809c52ad
 8004514:	3e927e4f 	.word	0x3e927e4f
 8004518:	19cb1590 	.word	0x19cb1590
 800451c:	3efa01a0 	.word	0x3efa01a0
 8004520:	16c15177 	.word	0x16c15177
 8004524:	3f56c16c 	.word	0x3f56c16c
 8004528:	5555554c 	.word	0x5555554c
 800452c:	3fa55555 	.word	0x3fa55555
 8004530:	00000000 	.word	0x00000000
 8004534:	3ff00000 	.word	0x3ff00000
 8004538:	3fe00000 	.word	0x3fe00000
 800453c:	3fd33332 	.word	0x3fd33332
 8004540:	3ff00000 	.word	0x3ff00000
 8004544:	3fe90000 	.word	0x3fe90000
 8004548:	3fd20000 	.word	0x3fd20000
 800454c:	00000000 	.word	0x00000000

08004550 <__kernel_rem_pio2>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	ed2d 8b02 	vpush	{d8}
 8004558:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800455c:	f112 0f14 	cmn.w	r2, #20
 8004560:	9308      	str	r3, [sp, #32]
 8004562:	9101      	str	r1, [sp, #4]
 8004564:	4bc4      	ldr	r3, [pc, #784]	; (8004878 <__kernel_rem_pio2+0x328>)
 8004566:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004568:	900b      	str	r0, [sp, #44]	; 0x2c
 800456a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800456e:	9302      	str	r3, [sp, #8]
 8004570:	9b08      	ldr	r3, [sp, #32]
 8004572:	f103 33ff 	add.w	r3, r3, #4294967295
 8004576:	bfa8      	it	ge
 8004578:	1ed4      	subge	r4, r2, #3
 800457a:	9306      	str	r3, [sp, #24]
 800457c:	bfb2      	itee	lt
 800457e:	2400      	movlt	r4, #0
 8004580:	2318      	movge	r3, #24
 8004582:	fb94 f4f3 	sdivge	r4, r4, r3
 8004586:	f06f 0317 	mvn.w	r3, #23
 800458a:	fb04 3303 	mla	r3, r4, r3, r3
 800458e:	eb03 0a02 	add.w	sl, r3, r2
 8004592:	9b02      	ldr	r3, [sp, #8]
 8004594:	9a06      	ldr	r2, [sp, #24]
 8004596:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004868 <__kernel_rem_pio2+0x318>
 800459a:	eb03 0802 	add.w	r8, r3, r2
 800459e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80045a0:	1aa7      	subs	r7, r4, r2
 80045a2:	ae22      	add	r6, sp, #136	; 0x88
 80045a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80045a8:	2500      	movs	r5, #0
 80045aa:	4545      	cmp	r5, r8
 80045ac:	dd13      	ble.n	80045d6 <__kernel_rem_pio2+0x86>
 80045ae:	9b08      	ldr	r3, [sp, #32]
 80045b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004868 <__kernel_rem_pio2+0x318>
 80045b4:	aa22      	add	r2, sp, #136	; 0x88
 80045b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80045ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80045be:	f04f 0800 	mov.w	r8, #0
 80045c2:	9b02      	ldr	r3, [sp, #8]
 80045c4:	4598      	cmp	r8, r3
 80045c6:	dc2f      	bgt.n	8004628 <__kernel_rem_pio2+0xd8>
 80045c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80045cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80045d0:	462f      	mov	r7, r5
 80045d2:	2600      	movs	r6, #0
 80045d4:	e01b      	b.n	800460e <__kernel_rem_pio2+0xbe>
 80045d6:	42ef      	cmn	r7, r5
 80045d8:	d407      	bmi.n	80045ea <__kernel_rem_pio2+0x9a>
 80045da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80045de:	f7fb ff45 	bl	800046c <__aeabi_i2d>
 80045e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80045e6:	3501      	adds	r5, #1
 80045e8:	e7df      	b.n	80045aa <__kernel_rem_pio2+0x5a>
 80045ea:	ec51 0b18 	vmov	r0, r1, d8
 80045ee:	e7f8      	b.n	80045e2 <__kernel_rem_pio2+0x92>
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80045f8:	f7fb ffa2 	bl	8000540 <__aeabi_dmul>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004604:	f7fb fde6 	bl	80001d4 <__adddf3>
 8004608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800460c:	3601      	adds	r6, #1
 800460e:	9b06      	ldr	r3, [sp, #24]
 8004610:	429e      	cmp	r6, r3
 8004612:	f1a7 0708 	sub.w	r7, r7, #8
 8004616:	ddeb      	ble.n	80045f0 <__kernel_rem_pio2+0xa0>
 8004618:	ed9d 7b04 	vldr	d7, [sp, #16]
 800461c:	f108 0801 	add.w	r8, r8, #1
 8004620:	ecab 7b02 	vstmia	fp!, {d7}
 8004624:	3508      	adds	r5, #8
 8004626:	e7cc      	b.n	80045c2 <__kernel_rem_pio2+0x72>
 8004628:	9b02      	ldr	r3, [sp, #8]
 800462a:	aa0e      	add	r2, sp, #56	; 0x38
 800462c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004630:	930d      	str	r3, [sp, #52]	; 0x34
 8004632:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004634:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004638:	9c02      	ldr	r4, [sp, #8]
 800463a:	930c      	str	r3, [sp, #48]	; 0x30
 800463c:	00e3      	lsls	r3, r4, #3
 800463e:	930a      	str	r3, [sp, #40]	; 0x28
 8004640:	ab9a      	add	r3, sp, #616	; 0x268
 8004642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004646:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800464a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800464e:	ab72      	add	r3, sp, #456	; 0x1c8
 8004650:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004654:	46c3      	mov	fp, r8
 8004656:	46a1      	mov	r9, r4
 8004658:	f1b9 0f00 	cmp.w	r9, #0
 800465c:	f1a5 0508 	sub.w	r5, r5, #8
 8004660:	dc77      	bgt.n	8004752 <__kernel_rem_pio2+0x202>
 8004662:	ec47 6b10 	vmov	d0, r6, r7
 8004666:	4650      	mov	r0, sl
 8004668:	f000 fc0a 	bl	8004e80 <scalbn>
 800466c:	ec57 6b10 	vmov	r6, r7, d0
 8004670:	2200      	movs	r2, #0
 8004672:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004676:	ee10 0a10 	vmov	r0, s0
 800467a:	4639      	mov	r1, r7
 800467c:	f7fb ff60 	bl	8000540 <__aeabi_dmul>
 8004680:	ec41 0b10 	vmov	d0, r0, r1
 8004684:	f000 fb7c 	bl	8004d80 <floor>
 8004688:	4b7c      	ldr	r3, [pc, #496]	; (800487c <__kernel_rem_pio2+0x32c>)
 800468a:	ec51 0b10 	vmov	r0, r1, d0
 800468e:	2200      	movs	r2, #0
 8004690:	f7fb ff56 	bl	8000540 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4630      	mov	r0, r6
 800469a:	4639      	mov	r1, r7
 800469c:	f7fb fd98 	bl	80001d0 <__aeabi_dsub>
 80046a0:	460f      	mov	r7, r1
 80046a2:	4606      	mov	r6, r0
 80046a4:	f7fc f9e6 	bl	8000a74 <__aeabi_d2iz>
 80046a8:	9004      	str	r0, [sp, #16]
 80046aa:	f7fb fedf 	bl	800046c <__aeabi_i2d>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4630      	mov	r0, r6
 80046b4:	4639      	mov	r1, r7
 80046b6:	f7fb fd8b 	bl	80001d0 <__aeabi_dsub>
 80046ba:	f1ba 0f00 	cmp.w	sl, #0
 80046be:	4606      	mov	r6, r0
 80046c0:	460f      	mov	r7, r1
 80046c2:	dd6d      	ble.n	80047a0 <__kernel_rem_pio2+0x250>
 80046c4:	1e62      	subs	r2, r4, #1
 80046c6:	ab0e      	add	r3, sp, #56	; 0x38
 80046c8:	9d04      	ldr	r5, [sp, #16]
 80046ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80046ce:	f1ca 0118 	rsb	r1, sl, #24
 80046d2:	fa40 f301 	asr.w	r3, r0, r1
 80046d6:	441d      	add	r5, r3
 80046d8:	408b      	lsls	r3, r1
 80046da:	1ac0      	subs	r0, r0, r3
 80046dc:	ab0e      	add	r3, sp, #56	; 0x38
 80046de:	9504      	str	r5, [sp, #16]
 80046e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80046e4:	f1ca 0317 	rsb	r3, sl, #23
 80046e8:	fa40 fb03 	asr.w	fp, r0, r3
 80046ec:	f1bb 0f00 	cmp.w	fp, #0
 80046f0:	dd65      	ble.n	80047be <__kernel_rem_pio2+0x26e>
 80046f2:	9b04      	ldr	r3, [sp, #16]
 80046f4:	2200      	movs	r2, #0
 80046f6:	3301      	adds	r3, #1
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	4615      	mov	r5, r2
 80046fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004700:	4294      	cmp	r4, r2
 8004702:	f300 809c 	bgt.w	800483e <__kernel_rem_pio2+0x2ee>
 8004706:	f1ba 0f00 	cmp.w	sl, #0
 800470a:	dd07      	ble.n	800471c <__kernel_rem_pio2+0x1cc>
 800470c:	f1ba 0f01 	cmp.w	sl, #1
 8004710:	f000 80c0 	beq.w	8004894 <__kernel_rem_pio2+0x344>
 8004714:	f1ba 0f02 	cmp.w	sl, #2
 8004718:	f000 80c6 	beq.w	80048a8 <__kernel_rem_pio2+0x358>
 800471c:	f1bb 0f02 	cmp.w	fp, #2
 8004720:	d14d      	bne.n	80047be <__kernel_rem_pio2+0x26e>
 8004722:	4632      	mov	r2, r6
 8004724:	463b      	mov	r3, r7
 8004726:	4956      	ldr	r1, [pc, #344]	; (8004880 <__kernel_rem_pio2+0x330>)
 8004728:	2000      	movs	r0, #0
 800472a:	f7fb fd51 	bl	80001d0 <__aeabi_dsub>
 800472e:	4606      	mov	r6, r0
 8004730:	460f      	mov	r7, r1
 8004732:	2d00      	cmp	r5, #0
 8004734:	d043      	beq.n	80047be <__kernel_rem_pio2+0x26e>
 8004736:	4650      	mov	r0, sl
 8004738:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004870 <__kernel_rem_pio2+0x320>
 800473c:	f000 fba0 	bl	8004e80 <scalbn>
 8004740:	4630      	mov	r0, r6
 8004742:	4639      	mov	r1, r7
 8004744:	ec53 2b10 	vmov	r2, r3, d0
 8004748:	f7fb fd42 	bl	80001d0 <__aeabi_dsub>
 800474c:	4606      	mov	r6, r0
 800474e:	460f      	mov	r7, r1
 8004750:	e035      	b.n	80047be <__kernel_rem_pio2+0x26e>
 8004752:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <__kernel_rem_pio2+0x334>)
 8004754:	2200      	movs	r2, #0
 8004756:	4630      	mov	r0, r6
 8004758:	4639      	mov	r1, r7
 800475a:	f7fb fef1 	bl	8000540 <__aeabi_dmul>
 800475e:	f7fc f989 	bl	8000a74 <__aeabi_d2iz>
 8004762:	f7fb fe83 	bl	800046c <__aeabi_i2d>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	ec43 2b18 	vmov	d8, r2, r3
 800476e:	4b46      	ldr	r3, [pc, #280]	; (8004888 <__kernel_rem_pio2+0x338>)
 8004770:	2200      	movs	r2, #0
 8004772:	f7fb fee5 	bl	8000540 <__aeabi_dmul>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4630      	mov	r0, r6
 800477c:	4639      	mov	r1, r7
 800477e:	f7fb fd27 	bl	80001d0 <__aeabi_dsub>
 8004782:	f7fc f977 	bl	8000a74 <__aeabi_d2iz>
 8004786:	e9d5 2300 	ldrd	r2, r3, [r5]
 800478a:	f84b 0b04 	str.w	r0, [fp], #4
 800478e:	ec51 0b18 	vmov	r0, r1, d8
 8004792:	f7fb fd1f 	bl	80001d4 <__adddf3>
 8004796:	f109 39ff 	add.w	r9, r9, #4294967295
 800479a:	4606      	mov	r6, r0
 800479c:	460f      	mov	r7, r1
 800479e:	e75b      	b.n	8004658 <__kernel_rem_pio2+0x108>
 80047a0:	d106      	bne.n	80047b0 <__kernel_rem_pio2+0x260>
 80047a2:	1e63      	subs	r3, r4, #1
 80047a4:	aa0e      	add	r2, sp, #56	; 0x38
 80047a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80047ae:	e79d      	b.n	80046ec <__kernel_rem_pio2+0x19c>
 80047b0:	4b36      	ldr	r3, [pc, #216]	; (800488c <__kernel_rem_pio2+0x33c>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	f7fc f94a 	bl	8000a4c <__aeabi_dcmpge>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d13d      	bne.n	8004838 <__kernel_rem_pio2+0x2e8>
 80047bc:	4683      	mov	fp, r0
 80047be:	2200      	movs	r2, #0
 80047c0:	2300      	movs	r3, #0
 80047c2:	4630      	mov	r0, r6
 80047c4:	4639      	mov	r1, r7
 80047c6:	f7fc f923 	bl	8000a10 <__aeabi_dcmpeq>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	f000 80c0 	beq.w	8004950 <__kernel_rem_pio2+0x400>
 80047d0:	1e65      	subs	r5, r4, #1
 80047d2:	462b      	mov	r3, r5
 80047d4:	2200      	movs	r2, #0
 80047d6:	9902      	ldr	r1, [sp, #8]
 80047d8:	428b      	cmp	r3, r1
 80047da:	da6c      	bge.n	80048b6 <__kernel_rem_pio2+0x366>
 80047dc:	2a00      	cmp	r2, #0
 80047de:	f000 8089 	beq.w	80048f4 <__kernel_rem_pio2+0x3a4>
 80047e2:	ab0e      	add	r3, sp, #56	; 0x38
 80047e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80047e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80ad 	beq.w	800494c <__kernel_rem_pio2+0x3fc>
 80047f2:	4650      	mov	r0, sl
 80047f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004870 <__kernel_rem_pio2+0x320>
 80047f8:	f000 fb42 	bl	8004e80 <scalbn>
 80047fc:	ab9a      	add	r3, sp, #616	; 0x268
 80047fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004802:	ec57 6b10 	vmov	r6, r7, d0
 8004806:	00ec      	lsls	r4, r5, #3
 8004808:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800480c:	46aa      	mov	sl, r5
 800480e:	f1ba 0f00 	cmp.w	sl, #0
 8004812:	f280 80d6 	bge.w	80049c2 <__kernel_rem_pio2+0x472>
 8004816:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004868 <__kernel_rem_pio2+0x318>
 800481a:	462e      	mov	r6, r5
 800481c:	2e00      	cmp	r6, #0
 800481e:	f2c0 8104 	blt.w	8004a2a <__kernel_rem_pio2+0x4da>
 8004822:	ab72      	add	r3, sp, #456	; 0x1c8
 8004824:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004828:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004890 <__kernel_rem_pio2+0x340>
 800482c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004830:	f04f 0800 	mov.w	r8, #0
 8004834:	1baf      	subs	r7, r5, r6
 8004836:	e0ea      	b.n	8004a0e <__kernel_rem_pio2+0x4be>
 8004838:	f04f 0b02 	mov.w	fp, #2
 800483c:	e759      	b.n	80046f2 <__kernel_rem_pio2+0x1a2>
 800483e:	f8d8 3000 	ldr.w	r3, [r8]
 8004842:	b955      	cbnz	r5, 800485a <__kernel_rem_pio2+0x30a>
 8004844:	b123      	cbz	r3, 8004850 <__kernel_rem_pio2+0x300>
 8004846:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800484a:	f8c8 3000 	str.w	r3, [r8]
 800484e:	2301      	movs	r3, #1
 8004850:	3201      	adds	r2, #1
 8004852:	f108 0804 	add.w	r8, r8, #4
 8004856:	461d      	mov	r5, r3
 8004858:	e752      	b.n	8004700 <__kernel_rem_pio2+0x1b0>
 800485a:	1acb      	subs	r3, r1, r3
 800485c:	f8c8 3000 	str.w	r3, [r8]
 8004860:	462b      	mov	r3, r5
 8004862:	e7f5      	b.n	8004850 <__kernel_rem_pio2+0x300>
 8004864:	f3af 8000 	nop.w
	...
 8004874:	3ff00000 	.word	0x3ff00000
 8004878:	080051e0 	.word	0x080051e0
 800487c:	40200000 	.word	0x40200000
 8004880:	3ff00000 	.word	0x3ff00000
 8004884:	3e700000 	.word	0x3e700000
 8004888:	41700000 	.word	0x41700000
 800488c:	3fe00000 	.word	0x3fe00000
 8004890:	080051a0 	.word	0x080051a0
 8004894:	1e62      	subs	r2, r4, #1
 8004896:	ab0e      	add	r3, sp, #56	; 0x38
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80048a0:	a90e      	add	r1, sp, #56	; 0x38
 80048a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80048a6:	e739      	b.n	800471c <__kernel_rem_pio2+0x1cc>
 80048a8:	1e62      	subs	r2, r4, #1
 80048aa:	ab0e      	add	r3, sp, #56	; 0x38
 80048ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80048b4:	e7f4      	b.n	80048a0 <__kernel_rem_pio2+0x350>
 80048b6:	a90e      	add	r1, sp, #56	; 0x38
 80048b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80048bc:	3b01      	subs	r3, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	e789      	b.n	80047d6 <__kernel_rem_pio2+0x286>
 80048c2:	3301      	adds	r3, #1
 80048c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d0fa      	beq.n	80048c2 <__kernel_rem_pio2+0x372>
 80048cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80048d2:	446a      	add	r2, sp
 80048d4:	3a98      	subs	r2, #152	; 0x98
 80048d6:	920a      	str	r2, [sp, #40]	; 0x28
 80048d8:	9a08      	ldr	r2, [sp, #32]
 80048da:	18e3      	adds	r3, r4, r3
 80048dc:	18a5      	adds	r5, r4, r2
 80048de:	aa22      	add	r2, sp, #136	; 0x88
 80048e0:	f104 0801 	add.w	r8, r4, #1
 80048e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	4543      	cmp	r3, r8
 80048ee:	da04      	bge.n	80048fa <__kernel_rem_pio2+0x3aa>
 80048f0:	461c      	mov	r4, r3
 80048f2:	e6a3      	b.n	800463c <__kernel_rem_pio2+0xec>
 80048f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7e4      	b.n	80048c4 <__kernel_rem_pio2+0x374>
 80048fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004900:	f7fb fdb4 	bl	800046c <__aeabi_i2d>
 8004904:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800490a:	46ab      	mov	fp, r5
 800490c:	461c      	mov	r4, r3
 800490e:	f04f 0900 	mov.w	r9, #0
 8004912:	2600      	movs	r6, #0
 8004914:	2700      	movs	r7, #0
 8004916:	9b06      	ldr	r3, [sp, #24]
 8004918:	4599      	cmp	r9, r3
 800491a:	dd06      	ble.n	800492a <__kernel_rem_pio2+0x3da>
 800491c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800491e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004922:	f108 0801 	add.w	r8, r8, #1
 8004926:	930a      	str	r3, [sp, #40]	; 0x28
 8004928:	e7df      	b.n	80048ea <__kernel_rem_pio2+0x39a>
 800492a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800492e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004932:	f7fb fe05 	bl	8000540 <__aeabi_dmul>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4630      	mov	r0, r6
 800493c:	4639      	mov	r1, r7
 800493e:	f7fb fc49 	bl	80001d4 <__adddf3>
 8004942:	f109 0901 	add.w	r9, r9, #1
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	e7e4      	b.n	8004916 <__kernel_rem_pio2+0x3c6>
 800494c:	3d01      	subs	r5, #1
 800494e:	e748      	b.n	80047e2 <__kernel_rem_pio2+0x292>
 8004950:	ec47 6b10 	vmov	d0, r6, r7
 8004954:	f1ca 0000 	rsb	r0, sl, #0
 8004958:	f000 fa92 	bl	8004e80 <scalbn>
 800495c:	ec57 6b10 	vmov	r6, r7, d0
 8004960:	4ba0      	ldr	r3, [pc, #640]	; (8004be4 <__kernel_rem_pio2+0x694>)
 8004962:	ee10 0a10 	vmov	r0, s0
 8004966:	2200      	movs	r2, #0
 8004968:	4639      	mov	r1, r7
 800496a:	f7fc f86f 	bl	8000a4c <__aeabi_dcmpge>
 800496e:	b1f8      	cbz	r0, 80049b0 <__kernel_rem_pio2+0x460>
 8004970:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <__kernel_rem_pio2+0x698>)
 8004972:	2200      	movs	r2, #0
 8004974:	4630      	mov	r0, r6
 8004976:	4639      	mov	r1, r7
 8004978:	f7fb fde2 	bl	8000540 <__aeabi_dmul>
 800497c:	f7fc f87a 	bl	8000a74 <__aeabi_d2iz>
 8004980:	4680      	mov	r8, r0
 8004982:	f7fb fd73 	bl	800046c <__aeabi_i2d>
 8004986:	4b97      	ldr	r3, [pc, #604]	; (8004be4 <__kernel_rem_pio2+0x694>)
 8004988:	2200      	movs	r2, #0
 800498a:	f7fb fdd9 	bl	8000540 <__aeabi_dmul>
 800498e:	460b      	mov	r3, r1
 8004990:	4602      	mov	r2, r0
 8004992:	4639      	mov	r1, r7
 8004994:	4630      	mov	r0, r6
 8004996:	f7fb fc1b 	bl	80001d0 <__aeabi_dsub>
 800499a:	f7fc f86b 	bl	8000a74 <__aeabi_d2iz>
 800499e:	1c65      	adds	r5, r4, #1
 80049a0:	ab0e      	add	r3, sp, #56	; 0x38
 80049a2:	f10a 0a18 	add.w	sl, sl, #24
 80049a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80049aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80049ae:	e720      	b.n	80047f2 <__kernel_rem_pio2+0x2a2>
 80049b0:	4630      	mov	r0, r6
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fc f85e 	bl	8000a74 <__aeabi_d2iz>
 80049b8:	ab0e      	add	r3, sp, #56	; 0x38
 80049ba:	4625      	mov	r5, r4
 80049bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80049c0:	e717      	b.n	80047f2 <__kernel_rem_pio2+0x2a2>
 80049c2:	ab0e      	add	r3, sp, #56	; 0x38
 80049c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80049c8:	f7fb fd50 	bl	800046c <__aeabi_i2d>
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	f7fb fdb6 	bl	8000540 <__aeabi_dmul>
 80049d4:	4b84      	ldr	r3, [pc, #528]	; (8004be8 <__kernel_rem_pio2+0x698>)
 80049d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80049da:	2200      	movs	r2, #0
 80049dc:	4630      	mov	r0, r6
 80049de:	4639      	mov	r1, r7
 80049e0:	f7fb fdae 	bl	8000540 <__aeabi_dmul>
 80049e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049e8:	4606      	mov	r6, r0
 80049ea:	460f      	mov	r7, r1
 80049ec:	e70f      	b.n	800480e <__kernel_rem_pio2+0x2be>
 80049ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80049f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80049f6:	f7fb fda3 	bl	8000540 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a02:	f7fb fbe7 	bl	80001d4 <__adddf3>
 8004a06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a0a:	f108 0801 	add.w	r8, r8, #1
 8004a0e:	9b02      	ldr	r3, [sp, #8]
 8004a10:	4598      	cmp	r8, r3
 8004a12:	dc01      	bgt.n	8004a18 <__kernel_rem_pio2+0x4c8>
 8004a14:	45b8      	cmp	r8, r7
 8004a16:	ddea      	ble.n	80049ee <__kernel_rem_pio2+0x49e>
 8004a18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a1c:	ab4a      	add	r3, sp, #296	; 0x128
 8004a1e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004a22:	ed87 7b00 	vstr	d7, [r7]
 8004a26:	3e01      	subs	r6, #1
 8004a28:	e6f8      	b.n	800481c <__kernel_rem_pio2+0x2cc>
 8004a2a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	dc0b      	bgt.n	8004a48 <__kernel_rem_pio2+0x4f8>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	dc35      	bgt.n	8004aa0 <__kernel_rem_pio2+0x550>
 8004a34:	d059      	beq.n	8004aea <__kernel_rem_pio2+0x59a>
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	f003 0007 	and.w	r0, r3, #7
 8004a3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004a40:	ecbd 8b02 	vpop	{d8}
 8004a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d1f3      	bne.n	8004a36 <__kernel_rem_pio2+0x4e6>
 8004a4e:	ab4a      	add	r3, sp, #296	; 0x128
 8004a50:	4423      	add	r3, r4
 8004a52:	9306      	str	r3, [sp, #24]
 8004a54:	461c      	mov	r4, r3
 8004a56:	469a      	mov	sl, r3
 8004a58:	9502      	str	r5, [sp, #8]
 8004a5a:	9b02      	ldr	r3, [sp, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f1aa 0a08 	sub.w	sl, sl, #8
 8004a62:	dc6b      	bgt.n	8004b3c <__kernel_rem_pio2+0x5ec>
 8004a64:	46aa      	mov	sl, r5
 8004a66:	f1ba 0f01 	cmp.w	sl, #1
 8004a6a:	f1a4 0408 	sub.w	r4, r4, #8
 8004a6e:	f300 8085 	bgt.w	8004b7c <__kernel_rem_pio2+0x62c>
 8004a72:	9c06      	ldr	r4, [sp, #24]
 8004a74:	2000      	movs	r0, #0
 8004a76:	3408      	adds	r4, #8
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2d01      	cmp	r5, #1
 8004a7c:	f300 809d 	bgt.w	8004bba <__kernel_rem_pio2+0x66a>
 8004a80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004a84:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004a88:	f1bb 0f00 	cmp.w	fp, #0
 8004a8c:	f040 809b 	bne.w	8004bc6 <__kernel_rem_pio2+0x676>
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	e9c3 5600 	strd	r5, r6, [r3]
 8004a96:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004a9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004a9e:	e7ca      	b.n	8004a36 <__kernel_rem_pio2+0x4e6>
 8004aa0:	3408      	adds	r4, #8
 8004aa2:	ab4a      	add	r3, sp, #296	; 0x128
 8004aa4:	441c      	add	r4, r3
 8004aa6:	462e      	mov	r6, r5
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	da36      	bge.n	8004b1e <__kernel_rem_pio2+0x5ce>
 8004ab0:	f1bb 0f00 	cmp.w	fp, #0
 8004ab4:	d039      	beq.n	8004b2a <__kernel_rem_pio2+0x5da>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004abc:	9c01      	ldr	r4, [sp, #4]
 8004abe:	e9c4 2300 	strd	r2, r3, [r4]
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004aca:	f7fb fb81 	bl	80001d0 <__aeabi_dsub>
 8004ace:	ae4c      	add	r6, sp, #304	; 0x130
 8004ad0:	2401      	movs	r4, #1
 8004ad2:	42a5      	cmp	r5, r4
 8004ad4:	da2c      	bge.n	8004b30 <__kernel_rem_pio2+0x5e0>
 8004ad6:	f1bb 0f00 	cmp.w	fp, #0
 8004ada:	d002      	beq.n	8004ae2 <__kernel_rem_pio2+0x592>
 8004adc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004ae8:	e7a5      	b.n	8004a36 <__kernel_rem_pio2+0x4e6>
 8004aea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004aee:	eb0d 0403 	add.w	r4, sp, r3
 8004af2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004af6:	2000      	movs	r0, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	da09      	bge.n	8004b12 <__kernel_rem_pio2+0x5c2>
 8004afe:	f1bb 0f00 	cmp.w	fp, #0
 8004b02:	d002      	beq.n	8004b0a <__kernel_rem_pio2+0x5ba>
 8004b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b08:	4619      	mov	r1, r3
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	e9c3 0100 	strd	r0, r1, [r3]
 8004b10:	e791      	b.n	8004a36 <__kernel_rem_pio2+0x4e6>
 8004b12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b16:	f7fb fb5d 	bl	80001d4 <__adddf3>
 8004b1a:	3d01      	subs	r5, #1
 8004b1c:	e7ed      	b.n	8004afa <__kernel_rem_pio2+0x5aa>
 8004b1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b22:	f7fb fb57 	bl	80001d4 <__adddf3>
 8004b26:	3e01      	subs	r6, #1
 8004b28:	e7c0      	b.n	8004aac <__kernel_rem_pio2+0x55c>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	e7c5      	b.n	8004abc <__kernel_rem_pio2+0x56c>
 8004b30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004b34:	f7fb fb4e 	bl	80001d4 <__adddf3>
 8004b38:	3401      	adds	r4, #1
 8004b3a:	e7ca      	b.n	8004ad2 <__kernel_rem_pio2+0x582>
 8004b3c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b40:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004b44:	9b02      	ldr	r3, [sp, #8]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	4632      	mov	r2, r6
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	4640      	mov	r0, r8
 8004b50:	4649      	mov	r1, r9
 8004b52:	f7fb fb3f 	bl	80001d4 <__adddf3>
 8004b56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f7fb fb35 	bl	80001d0 <__aeabi_dsub>
 8004b66:	4632      	mov	r2, r6
 8004b68:	463b      	mov	r3, r7
 8004b6a:	f7fb fb33 	bl	80001d4 <__adddf3>
 8004b6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004b72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b76:	ed8a 7b00 	vstr	d7, [sl]
 8004b7a:	e76e      	b.n	8004a5a <__kernel_rem_pio2+0x50a>
 8004b7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004b80:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004b84:	4640      	mov	r0, r8
 8004b86:	4632      	mov	r2, r6
 8004b88:	463b      	mov	r3, r7
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	f7fb fb22 	bl	80001d4 <__adddf3>
 8004b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4640      	mov	r0, r8
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	f7fb fb18 	bl	80001d0 <__aeabi_dsub>
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	f7fb fb16 	bl	80001d4 <__adddf3>
 8004ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004bac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bb0:	ed84 7b00 	vstr	d7, [r4]
 8004bb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bb8:	e755      	b.n	8004a66 <__kernel_rem_pio2+0x516>
 8004bba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004bbe:	f7fb fb09 	bl	80001d4 <__adddf3>
 8004bc2:	3d01      	subs	r5, #1
 8004bc4:	e759      	b.n	8004a7a <__kernel_rem_pio2+0x52a>
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	9a01      	ldr	r2, [sp, #4]
 8004bca:	601d      	str	r5, [r3, #0]
 8004bcc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004bd0:	605c      	str	r4, [r3, #4]
 8004bd2:	609f      	str	r7, [r3, #8]
 8004bd4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004bd8:	60d3      	str	r3, [r2, #12]
 8004bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bde:	6110      	str	r0, [r2, #16]
 8004be0:	6153      	str	r3, [r2, #20]
 8004be2:	e728      	b.n	8004a36 <__kernel_rem_pio2+0x4e6>
 8004be4:	41700000 	.word	0x41700000
 8004be8:	3e700000 	.word	0x3e700000
 8004bec:	00000000 	.word	0x00000000

08004bf0 <__kernel_sin>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	ed2d 8b04 	vpush	{d8-d9}
 8004bf8:	eeb0 8a41 	vmov.f32	s16, s2
 8004bfc:	eef0 8a61 	vmov.f32	s17, s3
 8004c00:	ec55 4b10 	vmov	r4, r5, d0
 8004c04:	b083      	sub	sp, #12
 8004c06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004c0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004c0e:	9001      	str	r0, [sp, #4]
 8004c10:	da06      	bge.n	8004c20 <__kernel_sin+0x30>
 8004c12:	ee10 0a10 	vmov	r0, s0
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb ff2c 	bl	8000a74 <__aeabi_d2iz>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d051      	beq.n	8004cc4 <__kernel_sin+0xd4>
 8004c20:	4622      	mov	r2, r4
 8004c22:	462b      	mov	r3, r5
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7fb fc8a 	bl	8000540 <__aeabi_dmul>
 8004c2c:	4682      	mov	sl, r0
 8004c2e:	468b      	mov	fp, r1
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4620      	mov	r0, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	f7fb fc82 	bl	8000540 <__aeabi_dmul>
 8004c3c:	a341      	add	r3, pc, #260	; (adr r3, 8004d44 <__kernel_sin+0x154>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	4680      	mov	r8, r0
 8004c44:	4689      	mov	r9, r1
 8004c46:	4650      	mov	r0, sl
 8004c48:	4659      	mov	r1, fp
 8004c4a:	f7fb fc79 	bl	8000540 <__aeabi_dmul>
 8004c4e:	a33f      	add	r3, pc, #252	; (adr r3, 8004d4c <__kernel_sin+0x15c>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fabc 	bl	80001d0 <__aeabi_dsub>
 8004c58:	4652      	mov	r2, sl
 8004c5a:	465b      	mov	r3, fp
 8004c5c:	f7fb fc70 	bl	8000540 <__aeabi_dmul>
 8004c60:	a33c      	add	r3, pc, #240	; (adr r3, 8004d54 <__kernel_sin+0x164>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fab5 	bl	80001d4 <__adddf3>
 8004c6a:	4652      	mov	r2, sl
 8004c6c:	465b      	mov	r3, fp
 8004c6e:	f7fb fc67 	bl	8000540 <__aeabi_dmul>
 8004c72:	a33a      	add	r3, pc, #232	; (adr r3, 8004d5c <__kernel_sin+0x16c>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb faaa 	bl	80001d0 <__aeabi_dsub>
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	465b      	mov	r3, fp
 8004c80:	f7fb fc5e 	bl	8000540 <__aeabi_dmul>
 8004c84:	a337      	add	r3, pc, #220	; (adr r3, 8004d64 <__kernel_sin+0x174>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb faa3 	bl	80001d4 <__adddf3>
 8004c8e:	9b01      	ldr	r3, [sp, #4]
 8004c90:	4606      	mov	r6, r0
 8004c92:	460f      	mov	r7, r1
 8004c94:	b9eb      	cbnz	r3, 8004cd2 <__kernel_sin+0xe2>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	f7fb fc4f 	bl	8000540 <__aeabi_dmul>
 8004ca2:	a325      	add	r3, pc, #148	; (adr r3, 8004d38 <__kernel_sin+0x148>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fa92 	bl	80001d0 <__aeabi_dsub>
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	f7fb fc46 	bl	8000540 <__aeabi_dmul>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4620      	mov	r0, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	f7fb fa8a 	bl	80001d4 <__adddf3>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	ec45 4b10 	vmov	d0, r4, r5
 8004cc8:	b003      	add	sp, #12
 8004cca:	ecbd 8b04 	vpop	{d8-d9}
 8004cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <__kernel_sin+0x150>)
 8004cd4:	ec51 0b18 	vmov	r0, r1, d8
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f7fb fc31 	bl	8000540 <__aeabi_dmul>
 8004cde:	4632      	mov	r2, r6
 8004ce0:	ec41 0b19 	vmov	d9, r0, r1
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f7fb fc29 	bl	8000540 <__aeabi_dmul>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	ec51 0b19 	vmov	r0, r1, d9
 8004cf6:	f7fb fa6b 	bl	80001d0 <__aeabi_dsub>
 8004cfa:	4652      	mov	r2, sl
 8004cfc:	465b      	mov	r3, fp
 8004cfe:	f7fb fc1f 	bl	8000540 <__aeabi_dmul>
 8004d02:	ec53 2b18 	vmov	r2, r3, d8
 8004d06:	f7fb fa63 	bl	80001d0 <__aeabi_dsub>
 8004d0a:	a30b      	add	r3, pc, #44	; (adr r3, 8004d38 <__kernel_sin+0x148>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	4606      	mov	r6, r0
 8004d12:	460f      	mov	r7, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fc12 	bl	8000540 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4630      	mov	r0, r6
 8004d22:	4639      	mov	r1, r7
 8004d24:	f7fb fa56 	bl	80001d4 <__adddf3>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	4629      	mov	r1, r5
 8004d30:	f7fb fa4e 	bl	80001d0 <__aeabi_dsub>
 8004d34:	e7c4      	b.n	8004cc0 <__kernel_sin+0xd0>
 8004d36:	bf00      	nop
 8004d38:	55555549 	.word	0x55555549
 8004d3c:	3fc55555 	.word	0x3fc55555
 8004d40:	3fe00000 	.word	0x3fe00000
 8004d44:	5acfd57c 	.word	0x5acfd57c
 8004d48:	3de5d93a 	.word	0x3de5d93a
 8004d4c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004d50:	3e5ae5e6 	.word	0x3e5ae5e6
 8004d54:	57b1fe7d 	.word	0x57b1fe7d
 8004d58:	3ec71de3 	.word	0x3ec71de3
 8004d5c:	19c161d5 	.word	0x19c161d5
 8004d60:	3f2a01a0 	.word	0x3f2a01a0
 8004d64:	1110f8a6 	.word	0x1110f8a6
 8004d68:	3f811111 	.word	0x3f811111

08004d6c <fabs>:
 8004d6c:	ec51 0b10 	vmov	r0, r1, d0
 8004d70:	ee10 2a10 	vmov	r2, s0
 8004d74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d78:	ec43 2b10 	vmov	d0, r2, r3
 8004d7c:	4770      	bx	lr
	...

08004d80 <floor>:
 8004d80:	ec51 0b10 	vmov	r0, r1, d0
 8004d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004d8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004d90:	2e13      	cmp	r6, #19
 8004d92:	ee10 5a10 	vmov	r5, s0
 8004d96:	ee10 8a10 	vmov	r8, s0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	dc32      	bgt.n	8004e04 <floor+0x84>
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	da14      	bge.n	8004dcc <floor+0x4c>
 8004da2:	a333      	add	r3, pc, #204	; (adr r3, 8004e70 <floor+0xf0>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fa14 	bl	80001d4 <__adddf3>
 8004dac:	2200      	movs	r2, #0
 8004dae:	2300      	movs	r3, #0
 8004db0:	f7fb fe56 	bl	8000a60 <__aeabi_dcmpgt>
 8004db4:	b138      	cbz	r0, 8004dc6 <floor+0x46>
 8004db6:	2c00      	cmp	r4, #0
 8004db8:	da57      	bge.n	8004e6a <floor+0xea>
 8004dba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004dbe:	431d      	orrs	r5, r3
 8004dc0:	d001      	beq.n	8004dc6 <floor+0x46>
 8004dc2:	4c2d      	ldr	r4, [pc, #180]	; (8004e78 <floor+0xf8>)
 8004dc4:	2500      	movs	r5, #0
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e025      	b.n	8004e18 <floor+0x98>
 8004dcc:	4f2b      	ldr	r7, [pc, #172]	; (8004e7c <floor+0xfc>)
 8004dce:	4137      	asrs	r7, r6
 8004dd0:	ea01 0307 	and.w	r3, r1, r7
 8004dd4:	4303      	orrs	r3, r0
 8004dd6:	d01f      	beq.n	8004e18 <floor+0x98>
 8004dd8:	a325      	add	r3, pc, #148	; (adr r3, 8004e70 <floor+0xf0>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f7fb f9f9 	bl	80001d4 <__adddf3>
 8004de2:	2200      	movs	r2, #0
 8004de4:	2300      	movs	r3, #0
 8004de6:	f7fb fe3b 	bl	8000a60 <__aeabi_dcmpgt>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d0eb      	beq.n	8004dc6 <floor+0x46>
 8004dee:	2c00      	cmp	r4, #0
 8004df0:	bfbe      	ittt	lt
 8004df2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004df6:	fa43 f606 	asrlt.w	r6, r3, r6
 8004dfa:	19a4      	addlt	r4, r4, r6
 8004dfc:	ea24 0407 	bic.w	r4, r4, r7
 8004e00:	2500      	movs	r5, #0
 8004e02:	e7e0      	b.n	8004dc6 <floor+0x46>
 8004e04:	2e33      	cmp	r6, #51	; 0x33
 8004e06:	dd0b      	ble.n	8004e20 <floor+0xa0>
 8004e08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e0c:	d104      	bne.n	8004e18 <floor+0x98>
 8004e0e:	ee10 2a10 	vmov	r2, s0
 8004e12:	460b      	mov	r3, r1
 8004e14:	f7fb f9de 	bl	80001d4 <__adddf3>
 8004e18:	ec41 0b10 	vmov	d0, r0, r1
 8004e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295
 8004e28:	fa23 f707 	lsr.w	r7, r3, r7
 8004e2c:	4207      	tst	r7, r0
 8004e2e:	d0f3      	beq.n	8004e18 <floor+0x98>
 8004e30:	a30f      	add	r3, pc, #60	; (adr r3, 8004e70 <floor+0xf0>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f7fb f9cd 	bl	80001d4 <__adddf3>
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f7fb fe0f 	bl	8000a60 <__aeabi_dcmpgt>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d0bf      	beq.n	8004dc6 <floor+0x46>
 8004e46:	2c00      	cmp	r4, #0
 8004e48:	da02      	bge.n	8004e50 <floor+0xd0>
 8004e4a:	2e14      	cmp	r6, #20
 8004e4c:	d103      	bne.n	8004e56 <floor+0xd6>
 8004e4e:	3401      	adds	r4, #1
 8004e50:	ea25 0507 	bic.w	r5, r5, r7
 8004e54:	e7b7      	b.n	8004dc6 <floor+0x46>
 8004e56:	2301      	movs	r3, #1
 8004e58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004e5c:	fa03 f606 	lsl.w	r6, r3, r6
 8004e60:	4435      	add	r5, r6
 8004e62:	4545      	cmp	r5, r8
 8004e64:	bf38      	it	cc
 8004e66:	18e4      	addcc	r4, r4, r3
 8004e68:	e7f2      	b.n	8004e50 <floor+0xd0>
 8004e6a:	2500      	movs	r5, #0
 8004e6c:	462c      	mov	r4, r5
 8004e6e:	e7aa      	b.n	8004dc6 <floor+0x46>
 8004e70:	8800759c 	.word	0x8800759c
 8004e74:	7e37e43c 	.word	0x7e37e43c
 8004e78:	bff00000 	.word	0xbff00000
 8004e7c:	000fffff 	.word	0x000fffff

08004e80 <scalbn>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	ec55 4b10 	vmov	r4, r5, d0
 8004e86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	b99a      	cbnz	r2, 8004eb8 <scalbn+0x38>
 8004e90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004e94:	4323      	orrs	r3, r4
 8004e96:	d036      	beq.n	8004f06 <scalbn+0x86>
 8004e98:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <scalbn+0x100>)
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	ee10 0a10 	vmov	r0, s0
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f7fb fb4d 	bl	8000540 <__aeabi_dmul>
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <scalbn+0x104>)
 8004ea8:	429e      	cmp	r6, r3
 8004eaa:	4604      	mov	r4, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	da10      	bge.n	8004ed2 <scalbn+0x52>
 8004eb0:	a32b      	add	r3, pc, #172	; (adr r3, 8004f60 <scalbn+0xe0>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	e03a      	b.n	8004f2e <scalbn+0xae>
 8004eb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004ebc:	428a      	cmp	r2, r1
 8004ebe:	d10c      	bne.n	8004eda <scalbn+0x5a>
 8004ec0:	ee10 2a10 	vmov	r2, s0
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f7fb f984 	bl	80001d4 <__adddf3>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	460d      	mov	r5, r1
 8004ed0:	e019      	b.n	8004f06 <scalbn+0x86>
 8004ed2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	3a36      	subs	r2, #54	; 0x36
 8004eda:	4432      	add	r2, r6
 8004edc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	dd08      	ble.n	8004ef6 <scalbn+0x76>
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	a120      	add	r1, pc, #128	; (adr r1, 8004f68 <scalbn+0xe8>)
 8004ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eec:	da1c      	bge.n	8004f28 <scalbn+0xa8>
 8004eee:	a120      	add	r1, pc, #128	; (adr r1, 8004f70 <scalbn+0xf0>)
 8004ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ef4:	e018      	b.n	8004f28 <scalbn+0xa8>
 8004ef6:	2a00      	cmp	r2, #0
 8004ef8:	dd08      	ble.n	8004f0c <scalbn+0x8c>
 8004efa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004efe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f06:	ec45 4b10 	vmov	d0, r4, r5
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004f10:	da19      	bge.n	8004f46 <scalbn+0xc6>
 8004f12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f16:	429e      	cmp	r6, r3
 8004f18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004f1c:	dd0a      	ble.n	8004f34 <scalbn+0xb4>
 8004f1e:	a112      	add	r1, pc, #72	; (adr r1, 8004f68 <scalbn+0xe8>)
 8004f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e2      	bne.n	8004eee <scalbn+0x6e>
 8004f28:	a30f      	add	r3, pc, #60	; (adr r3, 8004f68 <scalbn+0xe8>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fb07 	bl	8000540 <__aeabi_dmul>
 8004f32:	e7cb      	b.n	8004ecc <scalbn+0x4c>
 8004f34:	a10a      	add	r1, pc, #40	; (adr r1, 8004f60 <scalbn+0xe0>)
 8004f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0b8      	beq.n	8004eb0 <scalbn+0x30>
 8004f3e:	a10e      	add	r1, pc, #56	; (adr r1, 8004f78 <scalbn+0xf8>)
 8004f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f44:	e7b4      	b.n	8004eb0 <scalbn+0x30>
 8004f46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f4a:	3236      	adds	r2, #54	; 0x36
 8004f4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004f54:	4620      	mov	r0, r4
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <scalbn+0x108>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	e7e8      	b.n	8004f2e <scalbn+0xae>
 8004f5c:	f3af 8000 	nop.w
 8004f60:	c2f8f359 	.word	0xc2f8f359
 8004f64:	01a56e1f 	.word	0x01a56e1f
 8004f68:	8800759c 	.word	0x8800759c
 8004f6c:	7e37e43c 	.word	0x7e37e43c
 8004f70:	8800759c 	.word	0x8800759c
 8004f74:	fe37e43c 	.word	0xfe37e43c
 8004f78:	c2f8f359 	.word	0xc2f8f359
 8004f7c:	81a56e1f 	.word	0x81a56e1f
 8004f80:	43500000 	.word	0x43500000
 8004f84:	ffff3cb0 	.word	0xffff3cb0
 8004f88:	3c900000 	.word	0x3c900000

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4d0d      	ldr	r5, [pc, #52]	; (8004fc4 <__libc_init_array+0x38>)
 8004f90:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f92:	1b64      	subs	r4, r4, r5
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	2600      	movs	r6, #0
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	4d0b      	ldr	r5, [pc, #44]	; (8004fcc <__libc_init_array+0x40>)
 8004f9e:	4c0c      	ldr	r4, [pc, #48]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa0:	f000 f820 	bl	8004fe4 <_init>
 8004fa4:	1b64      	subs	r4, r4, r5
 8004fa6:	10a4      	asrs	r4, r4, #2
 8004fa8:	2600      	movs	r6, #0
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	080051f8 	.word	0x080051f8
 8004fc8:	080051f8 	.word	0x080051f8
 8004fcc:	080051f8 	.word	0x080051f8
 8004fd0:	080051fc 	.word	0x080051fc

08004fd4 <memset>:
 8004fd4:	4402      	add	r2, r0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d100      	bne.n	8004fde <memset+0xa>
 8004fdc:	4770      	bx	lr
 8004fde:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe2:	e7f9      	b.n	8004fd8 <memset+0x4>

08004fe4 <_init>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr

08004ff0 <_fini>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr
